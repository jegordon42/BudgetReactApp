[{"/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/index.js":"1","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/reportWebVitals.js":"2","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/App.js":"3","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Header.js":"4","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Login.js":"5","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Dashboard.js":"6","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/SignUp.js":"7","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieButtons.js":"8","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Settings.js":"9","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Compared.js":"10","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarChart.js":"11","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieChart.js":"12","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Metrics.js":"13","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Transactions.js":"14","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/constants.js":"15","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarButtons.js":"16","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/TransactionsGrid.js":"17","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/ImportTransaction.js":"18","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Error.js":"19"},{"size":500,"mtime":1610928819351,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1610928819351,"results":"22","hashOfConfig":"21"},{"size":4858,"mtime":1621472025030,"results":"23","hashOfConfig":"21"},{"size":1206,"mtime":1621382090205,"results":"24","hashOfConfig":"21"},{"size":5014,"mtime":1621382090206,"results":"25","hashOfConfig":"21"},{"size":5564,"mtime":1621472054053,"results":"26","hashOfConfig":"21"},{"size":5307,"mtime":1621382090206,"results":"27","hashOfConfig":"21"},{"size":2807,"mtime":1621382090202,"results":"28","hashOfConfig":"21"},{"size":6826,"mtime":1621382090203,"results":"29","hashOfConfig":"21"},{"size":3652,"mtime":1621382090199,"results":"30","hashOfConfig":"21"},{"size":11556,"mtime":1621382090198,"results":"31","hashOfConfig":"21"},{"size":3002,"mtime":1621382090202,"results":"32","hashOfConfig":"21"},{"size":4356,"mtime":1621382090201,"results":"33","hashOfConfig":"21"},{"size":1988,"mtime":1621472062514,"results":"34","hashOfConfig":"21"},{"size":297,"mtime":1621382090207,"results":"35","hashOfConfig":"21"},{"size":6946,"mtime":1621382090198,"results":"36","hashOfConfig":"21"},{"size":8111,"mtime":1621560834054,"results":"37","hashOfConfig":"21"},{"size":5913,"mtime":1621382090199,"results":"38","hashOfConfig":"21"},{"size":742,"mtime":1621472143105,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1l5mur3",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"42"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"42"},"/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/index.js",[],["93","94"],"/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/reportWebVitals.js",[],"/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/App.js",["95","96","97","98"],"import React, { useState } from 'react'\nimport \"@progress/kendo-theme-bootstrap/dist/all.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './Components/Header'\nimport Login from './Components/Login';\nimport SignUp from './Components/SignUp';\nimport Dashboard from './Components/Dashboard';\nimport Error from './Components/Error'\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(\"login\")\n  const [user, setUser] = useState(null)\n  const [expenseCategories, setExpenseCategories] = useState([])\n  const [incomeCategories, setIncomeCategories] = useState([])\n  const [expenseTransactions, setExpenseTransactions] = useState([])\n  const [incomeTransactions, setIncomeTransactions] = useState([])\n  const [filteredExpenseTransactions, setFilteredExpenseTransactions] = useState([])\n  const [filteredIncomeTransactions, setFilteredIncomeTransactions] = useState([])\n  const [showSettings, setShowSettings] = useState(false)\n  const [showError, setShowError] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(\"\")\n  const [startDate, setStartDate] = useState(new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1))\n  const [endDate, setEndDate] = useState(new Date((new Date()).getFullYear(), (new Date()).getMonth() + 1, 0))\n\n  function setFilters(newStartDate, newEndDate){\n    var expenseTrans = []\n        for(var i = 0; i < expenseTransactions.length; i++){\n      var transaction = expenseTransactions[i];\n      var transDate = new Date(transaction['Date'])\n      if(newStartDate <= transDate && newEndDate >= transDate)\n      expenseTrans.push(transaction)\n    }\n    var incomeTrans = []\n    for(var i = 0; i < incomeTransactions.length; i++){\n      var transaction = incomeTransactions[i];\n      var transDate = new Date(transaction['Date'])\n      if(newStartDate <= transDate && newEndDate >= transDate)\n        incomeTrans.push(transaction)\n    }\n\n    setStartDate(newStartDate)\n    setEndDate(newEndDate)\n    setFilteredExpenseTransactions(expenseTrans)\n    setFilteredIncomeTransactions(incomeTrans)\n  }\n\n  function setFilteredTransactions(transactions, transType){\n    var trans = []\n    for(var i = 0; i < transactions.length; i++){\n      var transaction = transactions[i];\n      var transDate = new Date(transaction['Date'])\n      if(startDate <= transDate && endDate >= transDate)\n        trans.push(transaction)\n    }\n    if(transType == \"Expense\")\n      setFilteredExpenseTransactions(trans)\n    else\n      setFilteredIncomeTransactions(trans)\n  }\n\n  return (\n    <div>\n      <Header \n        page = {currentPage} \n        setPage = {setCurrentPage} \n        user = {user} \n        setUser = {setUser} \n        setShowSettings = {setShowSettings}\n      />\n      {currentPage === \"login\" && \n        <Login \n          setPage = {setCurrentPage} \n          setUser = {setUser} \n          setExpenseCategories = {setExpenseCategories} \n          expenseTransactions = {expenseTransactions}\n          setIncomeCategories = {setIncomeCategories}\n          setExpenseTransactions = {setExpenseTransactions} \n          setIncomeTransactions = {setIncomeTransactions}\n          setFilteredTransactions = {setFilteredTransactions}\n        />\n      }\n      {currentPage === \"signUp\" && \n        <SignUp \n          setPage = {setCurrentPage} \n          setUser = {setUser}\n          setExpenseCategories = {setExpenseCategories} \n          expenseTransactions = {expenseTransactions}\n          setIncomeCategories = {setIncomeCategories}\n          setExpenseTransactions = {setExpenseTransactions} \n          setIncomeTransactions = {setIncomeTransactions}\n          setFilteredTransactions = {setFilteredTransactions}\n        />\n      }\n      {currentPage === \"dashboard\" && \n        <Dashboard \n          user = {user} setUser = {setUser}\n          expenseCategories = {expenseCategories} setExpenseCategories = {setExpenseCategories}\n          incomeCategories = {incomeCategories} setIncomeCategories = {setIncomeCategories}\n          expenseTransactions = {expenseTransactions} setExpenseTransactions = {setExpenseTransactions}\n          filteredExpenseTransactions = {filteredExpenseTransactions}\n          filteredIncomeTransactions = {filteredIncomeTransactions}\n          setFilteredTransactions = {setFilteredTransactions}\n          incomeTransactions = {incomeTransactions} setIncomeTransactions = {setIncomeTransactions}\n          startDate = {startDate} endDate = {endDate} setFilters={setFilters}\n          showSettings = {showSettings} setShowSettings = {setShowSettings}\n          setShowError = {setShowError} setErrorMessage = {setErrorMessage}\n          setPage = {setCurrentPage}\n        />\n      }\n      <Error\n        show = {showError}\n        message = {errorMessage}\n        handleClose={() => {setShowError(false)}}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Header.js",[],"/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Login.js",["99","100","101"],"import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Joe's Money App\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n\n  function handleLogin(){\n    fetch('/Login?email=' + email + '&password=' + password)\n      .then(response => response.json())\n      .then(result => {\n        if(result['message'] == 'Success'){\n          props.setUser(result['user']);\n          props.setExpenseCategories(result['expenseCategories']);\n          props.setIncomeCategories(result['incomeCategories']);\n\n          var expenseTransactions = result['expenseTransactions'];\n          for(var i = 0; i < expenseTransactions.length; i++){\n            var date = new Date(expenseTransactions[i]['Date']);\n            date.setDate(date.getDate() + 1)\n            expenseTransactions[i]['Date'] = date.toLocaleDateString()\n          }\n          props.setExpenseTransactions(expenseTransactions)\n          props.setFilteredTransactions(expenseTransactions, \"Expense\")\n\n          var incomeTransactions = result['incomeTransactions'];\n          for(var i = 0; i < incomeTransactions.length; i++){\n            var date = new Date(incomeTransactions[i]['Date']);\n            date.setDate(date.getDate() + 1)\n            incomeTransactions[i]['Date'] = date.toLocaleDateString()\n          }\n          props.setIncomeTransactions(incomeTransactions)\n          props.setFilteredTransactions(incomeTransactions, \"Income\")\n\n          props.setPage(\"dashboard\")\n        }\n        else{\n          setMessage(result['message'])\n        }\n      })\n      .catch(e => {\n          console.log(e);\n      });\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            onChange={(event) => setEmail(event.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={(event) => setPassword(event.target.value)}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          {message}\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleLogin}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link onClick={() => props.setPage(\"signUp\")} variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Dashboard.js",["102","103"],"import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Settings from './DashboardComponents/Settings'\nimport PieChart from './DashboardComponents/PieChart'\nimport PieButtons from './DashboardComponents/PieButtons'\nimport BarChart from './DashboardComponents/BarChart'\nimport Transactions from './DashboardComponents/Transactions'\nimport Metrics from './DashboardComponents/Metrics'\nimport Compared from './DashboardComponents/Compared'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin:10\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction Dashboard(props) {\n  const classes = useStyles();\n  const [pieKey, setPieKey] = useState(1)\n  const [barKey, setBarKey] = useState(1)\n  const [gridKey, setGridKey] = useState(1)\n  const [pieIncomeExpenseButton, setPieIncomeExpenseButton] = useState(0)\n  const [pieActualPlannedButton, setPieActualPlannedButton] = useState(props.expenseTransactions.length == 0 ? 1 : 0)\n  \n  return (\n    <div className={classes.root}>\n      <Grid container spacing={2}>\n        <Grid item xs={7}>\n          <Paper className={classes.paper} style={{height:610}}>\n            <BarChart\n              barKey = {barKey} setBarKey = {setBarKey}\n              expenseCategories = {props.expenseCategories}\n              incomeCategories = {props.incomeCategories}\n              expenseTransactions = {props.expenseTransactions}\n              incomeTransactions = {props.incomeTransactions}\n              filteredIncomeTransactions = {props.filteredIncomeTransactions}\n              filteredExpenseTransactions = {props.filteredExpenseTransactions}\n              setFilteredTransactions = {props.setFilteredTransactions}\n              startDate = {props.startDate} endDate = {props.endDate} setFilters = {props.setFilters}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={5}>\n          <Paper className={classes.paper}>\n            <Metrics \n              expenseTransactions = {props.filteredExpenseTransactions}\n              incomeTransactions = {props.filteredIncomeTransactions}\n              expenseCategories = {props.expenseCategories}\n              incomeCategories = {props.incomeCategories}\n              startDate = {props.startDate} endDate = {props.endDate}\n            />\n          </Paper>\n          <br/>\n          <Paper className={classes.paper} style={{display:'flex', flexDirection:'column', height:365 }}> \n            <PieButtons\n              pieKey = {pieKey}\n              setPieKey = {setPieKey}\n              pieIncomeExpenseButton = {pieIncomeExpenseButton}\n              setPieIncomeExpenseButton = {setPieIncomeExpenseButton}\n              pieActualPlannedButton = {pieActualPlannedButton}\n              setPieActualPlannedButton = {setPieActualPlannedButton}\n            />\n           {pieActualPlannedButton != 2 && (\n              <PieChart\n                pieKey = {pieKey}\n                pieIncomeExpenseButton = {pieIncomeExpenseButton}\n                pieActualPlannedButton = {pieActualPlannedButton}\n                incomeCategories = {props.incomeCategories}\n                expenseCategories = {props.expenseCategories}\n                expenseTransactions = {props.filteredExpenseTransactions}\n                incomeTransactions = {props.filteredIncomeTransactions}\n                startDate = {props.startDate} endDate = {props.endDate}\n              />\n          )}\n          {pieActualPlannedButton === 2 && (\n            <Compared\n              pieIncomeExpenseButton = {pieIncomeExpenseButton}\n              incomeCategories = {props.incomeCategories}\n              expenseCategories = {props.expenseCategories}\n              expenseTransactions = {props.filteredExpenseTransactions}\n              incomeTransactions = {props.filteredIncomeTransactions}\n              startDate = {props.startDate} endDate = {props.endDate}\n            />\n          )}\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>  \n            <Transactions \n              user = {props.user}\n              gridKey = {gridKey}\n              expenseTransactions = {props.expenseTransactions} setExpenseTransactions = {props.setExpenseTransactions}\n              incomeTransactions = {props.incomeTransactions} setIncomeTransactions = {props.setIncomeTransactions}\n              filteredExpenseTransactions = {props.filteredExpenseTransactions}\n              filteredIncomeTransactions = {props.filteredIncomeTransactions}\n              setFilteredTransactions = {props.setFilteredTransactions}\n              setShowError = {props.setShowError} setErrorMessage={props.setErrorMessage}\n              expenseCategories = {props.expenseCategories}\n              incomeCategories = {props.incomeCategories}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n      <Settings \n        show={props.showSettings} \n        user={props.user}\n        incomeTransactions={props.incomeTransactions}\n        expenseTransactions={props.expenseTransactions}\n        expenseCategories={props.expenseCategories} setExpenseCategories = {props.setExpenseCategories}\n        incomeCategories = {props.incomeCategories} setIncomeCategories = {props.setIncomeCategories}\n        handleClose={() => {props.setShowSettings(false); setGridKey(gridKey + 1)}}\n      />\n\n    </div>\n  );\n}\n\nexport default Dashboard;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/SignUp.js",["104","105","106","107"],"import React, { useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { SentimentDissatisfiedOutlined } from '@material-ui/icons';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n      Joe's Money App\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp(props) {\n  const classes = useStyles();\n  const [firstName, setFirstName] = useState(\"\")\n  const [lastName, setLastName] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n\n  function handleSignUp(){\n    fetch('/SignUp?firstName=' + firstName + '&lastName=' + lastName + '&email=' + email + '&password=' + password)\n      .then(response => response.json())\n      .then(result => {\n        console.log(result['message'])\n        if(result['message'] == 'Success'){\n          props.setUser(result['user']);\n          props.setExpenseCategories(result['expenseCategories']);\n          props.setIncomeCategories(result['incomeCategories']);\n          props.setExpenseTransactions([])\n          props.setIncomeTransactions([])\n          props.setFilteredTransactions([], \"Expense\")\n          props.setFilteredTransactions([], \"Income\")\n          props.setPage(\"dashboard\")\n        }\n        else{\n          console.log(result['message'])\n          setMessage(result['message'])\n        }\n      })\n      .catch(e => {\n          console.log(e);\n      });\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                onChange={(event) => setFirstName(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                autoComplete=\"lname\"\n                onChange={(event) => setLastName(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange={(event) => setEmail(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={(event) => setPassword(event.target.value)}\n              />\n            </Grid>\n          </Grid>\n          {message}\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleSignUp}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link onClick={() => props.setPage(\"login\")} variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieButtons.js",["108","109","110","111","112","113","114","115","116"],"import React, {useState} from 'react';\nimport {ButtonGroup, Button} from 'react-bootstrap';\nimport Grid from '@material-ui/core/Grid';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nfunction PieButtons(props) {\n  const pieTitles = [\n    ['Actual Expenses By Category', 'Planned Expenses By Category', 'Actual Vs. Planned Expenses'],\n    ['Actual Income By Category', 'Planned Income By Category', 'Actual Vs. Planned Income']\n  ]\n\n  function handleClick(button, buttonNum){\n    if(button == \"IncomeExpense\"){\n      props.setPieIncomeExpenseButton(buttonNum); \n    }else if(button == \"ActualPlanned\"){\n      props.setPieActualPlannedButton(buttonNum); \n    }\n    props.setPieKey(props.pieKey + 1)\n  }\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={7}>\n        {/* <Button \n            variant=\"secondary\" \n            active={props.pieIncomeExpenseButton == 0 ? true : false} \n            onClick={() => handleClick(\"IncomeExpense\", 0)}\n            style={{float:'left'}}\n            size=\"sm\"\n          >\n            <span>\n            <SettingsIcon style={{fontSize:15, marginTop:-2}}/>{' '}\n             Edit Categories\n            </span>\n        </Button> */}\n        <br/>\n        <h5 style={{float:'left', marginTop:10, marginBottom:10}}>\n          {pieTitles[props.pieIncomeExpenseButton][props.pieActualPlannedButton]}\n        </h5>\n      </Grid>\n      <Grid item xs={5}>\n      <ButtonGroup size=\"sm\" style={{float:'right', marginBottom:2}}>\n          <Button \n            variant=\"success\" \n            active={props.pieIncomeExpenseButton == 0 ? true : false} \n            onClick={() => handleClick(\"IncomeExpense\", 0)}\n          >\n            Expenses\n          </Button>\n          <Button \n            variant=\"success\" \n            active={props.pieIncomeExpenseButton == 1 ? true : false} \n            onClick={() => handleClick(\"IncomeExpense\", 1)}\n          >\n            Income\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup size=\"sm\" style={{float:'right'}}>\n          <Button \n            variant=\"success\" \n            active={props.pieActualPlannedButton == 0 ? true : false} \n            onClick={() => handleClick(\"ActualPlanned\", 0)}\n          >\n            Actual\n          </Button>\n          <Button \n            variant=\"success\" \n            active={props.pieActualPlannedButton == 1 ? true : false} \n            onClick={() => handleClick(\"ActualPlanned\", 1)}\n          >\n            Planned\n          </Button>\n          <Button \n            variant=\"success\" \n            active={props.pieActualPlannedButton == 2 ? true : false} \n            onClick={() => handleClick(\"ActualPlanned\", 2)}\n          >\n            Compared\n          </Button>\n        </ButtonGroup>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default PieButtons;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Settings.js",["117","118","119"],"import React, {useState} from 'react'\nimport { Modal, Nav, Button } from 'react-bootstrap'\nimport Grid from '@material-ui/core/Grid';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Settings(props) {\n    const [selectedTab, setSelectedTab] = useState(\"Expense\") \n    const [selectedCategories, setSelectedCategories] = useState([])\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n\n    function handleClose(){\n        props.handleClose()\n        setSelectedTab(\"Expense\")\n    }\n\n    function addCategory(){\n        var categoriesToUpdate = selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories;\n        var categories = categoriesToUpdate.concat([{CategoryId: 0, CategoryName: \"\", Planned: 0}]);\n        saveCategories(categories, selectedTab)\n    }\n\n    function deleteCategory(){\n        var categories = [];\n        var categoriesToUpdate = selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories;\n        for(var i = 0; i < categoriesToUpdate.length; i++){\n            var category = categoriesToUpdate[i];\n            if(!selectedCategories.includes(category.CategoryId))\n                categories.push(category);\n            else{\n                var transactions = selectedTab===\"Expense\" ? props.expenseTransactions : props.incomeTransactions;\n                for(var x = 0; x < transactions.length; x++){\n                    if(transactions[x].CategoryId === category.CategoryId){\n                        alert('One of the selected Categories to be deleted is used in one or more transactions. Please make sure to change existing transactions to not include this category. In an upcoming update, you will be able to select a different category from here to switch the transactions to.')\n                        return;\n                    }\n                }\n            } \n\n\n        }\n        saveCategories(categories, selectedTab);\n    }\n\n    function CheckBoxCellRenderer(params){\n        return <input   type=\"checkbox\" \n                        onChange={() => {\n                            var index = selectedCategories.indexOf(params.data.CategoryId); \n                            if(index == -1){\n                                selectedCategories.push(params.data.CategoryId);\n                            }else{\n                                selectedCategories.splice(index, 1);\n                            }\n                            setSelectedCategories(selectedCategories);\n                        }}\n                />\n    }\n\n    function onGridReady(params) {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    }\n\n    function onCellValueChanged(event){\n        var categoriesToUpdate = selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories;\n        categoriesToUpdate[event.rowIndex] = event.data\n        saveCategories(categoriesToUpdate, selectedTab);\n    }\n\n    function saveCategories(categories, categoryType){\n        fetch('/UpdateCategories', {\n            method : \"POST\",\n            headers : {\"Content-type\" : \"application/json\"},\n            body: JSON.stringify({\n                userId : props.user['userId'],\n                categoryType : categoryType,\n                categories : categories\n            })\n        })\n        .then(response => response.json())\n        .then(result => {\n            if(categoryType === \"Expense\"){\n                props.setExpenseCategories(result['categories'])\n            }else{\n                props.setIncomeCategories(result['categories'])\n            }\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    return (\n    <Modal show={props.show} onHide={handleClose}>\n        <Modal.Header>\n            <Modal.Title>Settings</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Nav fill variant=\"tabs\" defaultActiveKey=\"link-1\" style={{marginBottom:15}}>\n                <Nav.Item onClick={() => setSelectedTab(\"Expense\")}>\n                    <Nav.Link eventKey=\"link-1\">Expense</Nav.Link>\n                </Nav.Item>\n                <Nav.Item onClick={() => setSelectedTab(\"Income\")}>\n                    <Nav.Link eventKey=\"link-2\">Income</Nav.Link>\n                </Nav.Item>\n                <Nav.Item onClick={() => setSelectedTab(\"Profile\")}>\n                    <Nav.Link eventKey=\"link-3\">Profile</Nav.Link>\n                </Nav.Item>\n            </Nav>\n            {(selectedTab===\"Expense\" || selectedTab===\"Income\") && (\n                <div>\n                    <Grid container spacing={0}>\n                        <Grid item xs={6}>\n                            <h5 style={{marginTop:7}}>Categories</h5>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button variant=\"danger\" size=\"sm\" style={{float:'right'}} onClick={deleteCategory}>Delete</Button>\n                            <Button variant=\"primary\" size=\"sm\" style={{float:'right', marginRight:5}} onClick={addCategory}>Add</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <div className=\"ag-theme-alpine\" style={{ height: '100%', width: '100%' } }>\n                                <AgGridReact\n                                    rowData={selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories}\n                                    domLayout=\"autoHeight\"\n                                    onCellValueChanged={onCellValueChanged}\n                                    onGridReady={onGridReady}\n                                    frameworkComponents={{CheckBoxCellRenderer: CheckBoxCellRenderer}}\n                                >\n                                    <AgGridColumn headerName=\"\" field=\"CategoryId\" width={50} cellRendererFramework={CheckBoxCellRenderer} ></AgGridColumn>\n                                    <AgGridColumn headerName=\"Name\" field=\"CategoryName\" editable></AgGridColumn>\n                                    <AgGridColumn headerName=\"Planned\" field=\"Planned\" valueFormatter={(params) => {return \"$\" + params.data.Planned}} editable></AgGridColumn>\n                                </AgGridReact>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </div>\n            )}   \n            {selectedTab===\"Profile\" && (\n                <div>\n                    <h1>Profile</h1>\n                </div>\n            )}    \n        </Modal.Body>\n        <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n        </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default Settings;","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Compared.js",["120","121","122","123","124","125","126"],"import React, {useState} from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  Chart,\n  ChartTitle,\n  ChartTooltip,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartCategoryAxis,\n  ChartCategoryAxisItem,\n  ChartValueAxis,\n  ChartValueAxisItem\n} from '@progress/kendo-react-charts';\n\nfunction Compared(props) {\n\n  function filteredDateRangeAdjustment(){\n    var numDaysInFilteredRange = Math.ceil((Math.abs(props.endDate - props.startDate)) / (1000 * 60 * 60 * 24)) + 1;\n    if([28, 29, 30, 31].includes(numDaysInFilteredRange)) \n      return 1;\n    return numDaysInFilteredRange / (365 / 12) //Average month length\n  }\n\n  const tooltipRender = ({ point }) => {\n    const { value } = point;\n\n    return (\n      <span>\n        Planned: ${ value.target.toFixed(2) }\n        <br />\n        Actual: ${ value.current.toFixed(2) }\n        <br />\n        Diff: ${ (value.target - value.current).toFixed(2) }\n      </span>\n    )\n  };\n\n  function getActualAmount(transactions, categoryId){\n    var total = 0;\n    for(var i = 0; i < transactions.length; i++){\n      if(transactions[i].CategoryId == categoryId){\n        total += transactions[i].Amount;\n      }\n    }\n    return total;\n  }\n\n  return (\n    <div style={{height:240, overflow: 'scroll'}}>\n      {props.pieIncomeExpenseButton === 0 && props.expenseCategories.map((category) => {\n        var actualAmount = getActualAmount(props.expenseTransactions, category.CategoryId);\n        var planned = category.Planned * filteredDateRangeAdjustment()\n        var max = actualAmount < planned ? planned * 2 : ((actualAmount / planned) + 1) * planned\n        return (\n          <Chart style={{ height: 80 }}>\n            <ChartTitle text={category.CategoryName} align=\"left\"/>\n            <ChartSeries >\n                <ChartSeriesItem type=\"bullet\" color=\"#4361EE\" data={[[actualAmount, planned]]} />\n            </ChartSeries>\n            <ChartValueAxis>\n              <ChartValueAxisItem \n                majorGridLines={{ visible: false }} \n                minorTicks={{ visible: false }} \n                min={0} \n                max={max} \n                labels={{format: \"${0}\"}} \n                plotBands={[{from: 0, to: planned, color: 'lightgreen', opacity: .3}, {from: planned, to: max, color: '#FFC6FF', opacity: .2}]} \n              />\n            </ChartValueAxis>\n            <ChartTooltip render={tooltipRender} background=\"white\"/>\n          </Chart>)\n        })}\n      {props.pieIncomeExpenseButton === 1 && props.incomeCategories.map((category) => {\n        var actualAmount = getActualAmount(props.incomeTransactions, category.CategoryId);\n        var planned = category.Planned * filteredDateRangeAdjustment()\n        var max = actualAmount < planned ? planned * 2 : ((actualAmount / planned) + 1) * planned\n        return (\n          <Chart style={{ height: 80 }}>\n            <ChartTitle text={category.CategoryName} align=\"left\"/>\n            <ChartSeries >\n                <ChartSeriesItem type=\"bullet\" color=\"#4361EE\" data={[[actualAmount, planned]]} />\n            </ChartSeries>\n            <ChartValueAxis>\n              <ChartValueAxisItem \n                majorGridLines={{ visible: false }} \n                minorTicks={{ visible: false }} \n                min={0} \n                max={max} \n                labels={{format: \"${0}\"}} \n                plotBands={[{from: 0, to: planned, color: '#FFC6FF', opacity: .3}, {from: planned, to: max, color: 'lightgreen', opacity: .2}]}\n              />\n            </ChartValueAxis>\n            <ChartTooltip render={tooltipRender} background=\"white\"/>\n          </Chart>)\n        })}\n    </div>\n  );\n}\n\nexport default Compared;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarChart.js",["127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],"import React, {useState} from 'react';\nimport {Bar} from 'react-chartjs-2';\nimport BarButtons from './BarButtons'\nimport * as constants from '../../constants'\n\nfunction BarChart(props) {\n  const [expenseIncomeButton, setExpenseIncomeButton] = useState(0)\n  const [totalCategoryButton, setTotalCategoryButton] = useState(0)\n  const [dateButton, setDateButton] = useState(1)\n\n  function getBarChartDataByDay(startDate, endDate, transactions){\n    var labels = []\n    var actualData = []\n    var datasets = []\n    if(totalCategoryButton == 0){\n      for(var curDate = startDate; curDate <= endDate; curDate.setDate(curDate.getDate() + 1)){\n        labels.push(curDate.toLocaleDateString())\n        actualData.push(0)\n      }\n      for(var i = 0; i < transactions.length; i++){\n        var curDate = transactions[i]['Date']\n        var index = labels.indexOf(curDate)\n        if(index != -1)\n          actualData[index] += transactions[i]['Amount']\n      }\n      datasets.push({\n        label: 'Total Spending',\n        data: actualData,\n        stack: '1',\n        backgroundColor: '#28a744',\n        borderWidth:0\n      })\n    }else{\n      var categories = expenseIncomeButton == 0 ? props.expenseCategories : props.incomeCategories;\n      var categoryIds = []\n      for(var i = 0; i < categories.length; i++){\n        categoryIds.push(categories[i]['CategoryId'])\n        actualData.push([])\n      }\n      for(var curDate = startDate; curDate <= endDate; curDate.setDate(curDate.getDate() + 1)){\n        labels.push(curDate.toLocaleDateString())\n        for(var i = 0; i < categories.length; i++){\n          actualData[i].push(0)\n        }\n      }\n      for(var i = 0; i < transactions.length; i++){\n        var curDate = transactions[i]['Date']\n        var labelIndex = labels.indexOf(curDate)\n        if(labelIndex != -1){\n          var categoryIndex = categoryIds.indexOf(Number(transactions[i]['CategoryId']))\n          console.log(transactions[i]['CategoryId'])\n          console.log(categoryIds)\n          actualData[categoryIndex][labelIndex] += transactions[i]['Amount']\n        }\n      }\n      for(var i = 0; i < categories.length; i++){\n        datasets.push({\n          label : categories[i]['CategoryName'],\n          stack:'1',\n          data : actualData[i],\n          backgroundColor : constants.colors[i],\n          borderWidth : 0\n        });\n      }\n    }\n    return {\n      labels: labels,\n      datasets: datasets\n    }\n  }\n\n  function getBarChartDataByWeek(startDate, endDate, transactions){\n    var labels = []\n    var dateRanges = []\n    var actualData = []\n    var datasets = []\n    if(totalCategoryButton == 0){\n      for(var curDate = startDate; curDate <= endDate;){\n        var nextDate =  new Date(curDate.getFullYear(), curDate.getMonth(), curDate.getDate() + 6)\n        if(nextDate > endDate)\n          nextDate = endDate;\n        labels.push((curDate.getMonth() + 1).toString() + \"/\" + curDate.getDate().toString() + \"-\" + (nextDate.getMonth() + 1).toString() + \"/\" + nextDate.getDate().toString())\n        dateRanges.push([curDate, nextDate])\n        actualData.push(0)\n        curDate = new Date(curDate.getFullYear(), curDate.getMonth(), curDate.getDate() + 7);\n      }\n      for(var i = 0; i < transactions.length; i++){\n        var curDate = new Date(transactions[i]['Date'])\n        for(var index = 0; index < dateRanges.length; index++){\n          if(curDate >= dateRanges[index][0] && curDate <= dateRanges[index][1]){\n            actualData[index] += transactions[i]['Amount'];\n            break;\n          }\n        }\n      }\n      datasets.push({\n        label: 'Total Spending',\n        data: actualData,\n        stack: '1',\n        backgroundColor: '#28a744',\n        borderWidth:0\n      })\n    }else{\n      var categories = expenseIncomeButton == 0 ? props.expenseCategories : props.incomeCategories;\n      var categoryIds = []\n      for(var i = 0; i < categories.length; i++){\n        categoryIds.push(categories[i]['CategoryId'])\n        actualData.push([])\n      }\n      for(var curDate = startDate; curDate <= endDate;){\n        var nextDate =  new Date(curDate.getFullYear(), curDate.getMonth(), curDate.getDate() + 6)\n        if(nextDate > endDate)\n          nextDate = endDate;\n        labels.push((curDate.getMonth() + 1).toString() + \"/\" + curDate.getDate().toString() + \"-\" + (nextDate.getMonth() + 1).toString() + \"/\" + nextDate.getDate().toString())\n        dateRanges.push([curDate, nextDate])\n        for(var i = 0; i < categories.length; i++){\n          actualData[i].push(0)\n        }\n        curDate = new Date(curDate.getFullYear(), curDate.getMonth(), curDate.getDate() + 7);\n      }\n      for(var i = 0; i < transactions.length; i++){\n        var curDate = new Date(transactions[i]['Date'])\n        for(var index = 0; index < dateRanges.length; index++){\n          if(curDate >= dateRanges[index][0] && curDate <= dateRanges[index][1]){\n            var categoryIndex = categoryIds.indexOf(Number(transactions[i]['CategoryId']))\n            actualData[categoryIndex][index] += transactions[i]['Amount']\n            break;\n          }\n        }\n      }\n      for(var i = 0; i < categories.length; i++){\n        datasets.push({\n          label : categories[i]['CategoryName'],\n          stack:'1',\n          data : actualData[i],\n          backgroundColor : constants.colors[i],\n          borderWidth : 0\n        });\n      }\n    }\n    return {\n      labels: labels,\n      datasets: datasets\n    }\n  }\n\n  function getBarChartDataByMonth(startDate, endDate, transactions){\n    var labels = []\n    var dateRanges = []\n    var actualData = []\n    var datasets = []\n    if(totalCategoryButton == 0){\n      for(var curDate = startDate; curDate <= endDate;){\n        var nextDate =  new Date(curDate.getFullYear(), curDate.getMonth() + 1, 1)\n        nextDate.setDate(nextDate.getDate() - 1)\n\n        var isLastDate = false;\n        if(nextDate > endDate){\n          nextDate = endDate;\n          isLastDate = true\n        }\n        \n        if(curDate.getDate() == 1 && !isLastDate)\n          labels.push(constants.monthNames[curDate.getMonth()])\n        else\n          labels.push((curDate.getMonth() + 1).toString() + \"/\" + curDate.getDate().toString() + \"-\" + (nextDate.getMonth() + 1).toString() + \"/\" + nextDate.getDate().toString())\n        \n        dateRanges.push([curDate, nextDate])\n        actualData.push(0)\n        curDate = new Date(curDate.getFullYear(), curDate.getMonth() + 1, 1)\n      }\n      for(var i = 0; i < transactions.length; i++){\n        var curDate = new Date(transactions[i]['Date'])\n        for(var index = 0; index < dateRanges.length; index++){\n          if(curDate >= dateRanges[index][0] && curDate <= dateRanges[index][1]){\n            actualData[index] += transactions[i]['Amount'];\n            break;\n          }\n        }\n      }\n      datasets.push({\n        label: 'Total Spending',\n        data: actualData,\n        stack: '1',\n        backgroundColor: '#28a744',\n        borderWidth:0\n      })\n    }else{\n      var categories = expenseIncomeButton == 0 ? props.expenseCategories : props.incomeCategories;\n      var categoryIds = []\n      for(var i = 0; i < categories.length; i++){\n        categoryIds.push(categories[i]['CategoryId'])\n        actualData.push([])\n      }\n      for(var curDate = startDate; curDate <= endDate;){\n        var nextDate =  new Date(curDate.getFullYear(), curDate.getMonth() + 1, 1)\n        nextDate.setDate(nextDate.getDate() - 1)\n        var isLastDate = false;\n        if(nextDate > endDate){\n          nextDate = endDate;\n          isLastDate = true\n        }\n        if(curDate.getDate() == 1 && !isLastDate)\n          labels.push(constants.monthNames[curDate.getMonth()])\n        else\n          labels.push((curDate.getMonth() + 1).toString() + \"/\" + curDate.getDate().toString() + \"-\" + (nextDate.getMonth() + 1).toString() + \"/\" + nextDate.getDate().toString())\n        dateRanges.push([curDate, nextDate])\n        for(var i = 0; i < categories.length; i++){\n          actualData[i].push(0)\n        }\n        curDate = new Date(curDate.getFullYear(), curDate.getMonth() + 1, 1)\n      }\n      for(var i = 0; i < transactions.length; i++){\n        var curDate = new Date(transactions[i]['Date'])\n        for(var index = 0; index < dateRanges.length; index++){\n          if(curDate >= dateRanges[index][0] && curDate <= dateRanges[index][1]){\n            var categoryIndex = categoryIds.indexOf(Number(transactions[i]['CategoryId']))\n            actualData[categoryIndex][index] += transactions[i]['Amount']\n            break;\n          }\n        }\n      }\n      for(var i = 0; i < categories.length; i++){\n        datasets.push({\n          label : categories[i]['CategoryName'],\n          stack:'1',\n          data : actualData[i],\n          backgroundColor : constants.colors[i],\n          borderWidth : 0\n        });\n      }\n    }\n    return {\n      labels: labels,\n      datasets: datasets\n    }\n  }\n\n  function getBarChartData(){\n    var transactions = expenseIncomeButton == 0 ? props.filteredExpenseTransactions : props.filteredIncomeTransactions;\n    var startDate = new Date(props.startDate.getFullYear(), props.startDate.getMonth(), props.startDate.getDate())\n    var endDate = new Date(props.endDate.getFullYear(), props.endDate.getMonth(), props.endDate.getDate())\n    var numDaysInFilteredRange = Math.ceil((Math.abs(endDate - startDate)) / (1000 * 60 * 60 * 24)) + 1;\n    if(numDaysInFilteredRange < 42)//6 weeks or lower\n      return getBarChartDataByDay(startDate, endDate, transactions)\n    if(numDaysInFilteredRange < 168)//6 months and lower\n      return getBarChartDataByWeek(startDate, endDate, transactions)\n    return getBarChartDataByMonth(startDate, endDate, transactions)//6 months and higher\n  }\n\n  return (\n        <div>\n          <BarButtons\n            expenseIncomeButton = {expenseIncomeButton} setExpenseIncomeButton = {setExpenseIncomeButton}\n            totalCategoryButton = {totalCategoryButton} setTotalCategoryButton = {setTotalCategoryButton}\n            expenseTransactions = {props.expenseTransactions}\n            incomeTransactions = {props.incomeTransactions}\n            setFilteredTransactions = {props.setFilteredTransactions}\n            dateButton = {dateButton} setDateButton = {setDateButton}\n            startDate = {props.startDate} endDate = {props.endDate} setFilters = {props.setFilters}\n            setBarKey = {props.setBarKey}\n          />\n          <div> \n          <Bar \n            height = {430}\n            key = {props.barKey}\n            data={getBarChartData}\n            options={{\n              maintainAspectRatio:false,\n              legend:{\n                display:true,\n                position:'right'\n              },\n              scales: {\n                yAxes: [{\n                    ticks: {\n                        min:0,\n                        callback: function(value, index, values) {\n                            return '$' + value;\n                        }\n                    }\n                }]\n              },\n              tooltips: {\n                callbacks: {\n                    label: function(tooltipItem, data) {\n                        var label = data.datasets[tooltipItem.datasetIndex].label || '';\n                        var value = tooltipItem.value;\n\n                        label += ': $' + Number(value).toFixed(2);\n                        return label;\n                    }\n                }\n            }\n            }}\n          />\n          </div>\n         \n        </div>  \n  );\n}\n\nexport default BarChart;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieChart.js",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181"],"import React, {useState} from 'react';\nimport {Pie} from 'react-chartjs-2';\nimport * as constants from '../../constants'\n\nfunction PieChart(props) {\n\n  function filteredDateRangeAdjustment(){\n    var numDaysInFilteredRange = Math.ceil((Math.abs(props.endDate - props.startDate)) / (1000 * 60 * 60 * 24)) + 1;\n    if([28, 29, 30, 31].includes(numDaysInFilteredRange)) \n      return 1;\n    return numDaysInFilteredRange / (365 / 12) //Average month length\n  }\n\n  function getPieChartData(){\n    var pieLabels = [];\n    var pieData = [];\n\n    var categories = props.pieIncomeExpenseButton == 0 ? props.expenseCategories : props.incomeCategories;\n    var transactions = props.pieIncomeExpenseButton == 0 ? props.expenseTransactions : props.incomeTransactions;\n    for(var i = 0; i < categories.length; i++){\n      pieLabels.push(categories[i].CategoryName)\n      if(props.pieActualPlannedButton == 1){\n        pieData.push(categories[i].Planned * filteredDateRangeAdjustment())\n      }else if(props.pieActualPlannedButton == 0){\n        pieData.push(0)\n        for(var x = 0; x < transactions.length; x++){\n          if(transactions[x].CategoryId == categories[i].CategoryId){\n            pieData[i] += transactions[x].Amount;\n          }\n        }\n      }\n    }\n\n    var pieChartData = {\n      labels: pieLabels,\n      datasets: [\n        {\n          label: 'Categories',\n          backgroundColor: constants.colors,\n          data: pieData\n        }\n      ]\n    }\n    return pieChartData\n  }\n\n  return (\n    <div>\n        { ((props.pieIncomeExpenseButton == 0 && props.pieActualPlannedButton == 0 && props.expenseTransactions.length == 0) ||\n          (props.pieIncomeExpenseButton == 1 && props.pieActualPlannedButton == 0 && props.incomeTransactions.length == 0)) && \n          <div style={{height:235}}>\n            <br/><br/><br/>\n            <h1>No Data available</h1>\n          </div>\n        }\n        { (!((props.pieIncomeExpenseButton == 0 && props.pieActualPlannedButton == 0 && props.expenseTransactions.length == 0) ||\n          (props.pieIncomeExpenseButton == 1 && props.pieActualPlannedButton == 0 && props.incomeTransactions.length == 0))) && \n          <Pie\n            height = {270}\n            data={getPieChartData()}\n            options={{\n              animation:{duration:1000, easing:'easeInOutCubic'},\n              maintainAspectRatio:false,\n              legend:{\n                display:true,\n                position:'right'\n              },\n              tooltips: {\n                callbacks: {\n                    label: function(tooltipItem, data) {\n                        var label = data.labels[tooltipItem.index]\n                        var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n                        label += ': $' + Number(value).toFixed(2);\n                        return label;\n                    }\n                }\n              }\n            }}\n          />\n        }\n       \n    </div>\n  );\n}\n\nexport default PieChart;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Metrics.js",["182"],"import React, {useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport AnimatedNumber from \"animated-number-react\";\n\nfunction Metrics(props) {\n  var formatValue = (value) => value.toFixed(2);\n\n  function filteredDateRangeAdjustment(){\n    var numDaysInFilteredRange = Math.ceil((Math.abs(props.endDate - props.startDate)) / (1000 * 60 * 60 * 24)) + 1;\n    if([28, 29, 30, 31].includes(numDaysInFilteredRange)) \n      return 1;\n    return numDaysInFilteredRange / (365 / 12) //Average month length\n  }\n\n  function getTotalSpent(){\n    var total = 0;\n    for(var i = 0; i < props.expenseTransactions.length; i++){\n      total += Number(props.expenseTransactions[i].Amount);\n    }\n    return total;\n  }\n\n  function getTotalIncome(){\n    var total = 0;\n    for(var i = 0; i < props.incomeTransactions.length; i++){\n      total += Number(props.incomeTransactions[i].Amount);\n    }\n    return total;\n  }\n  \n  function getPlannedSpending(){\n    var total = 0;\n    for(var i = 0; i < props.expenseCategories.length; i++){\n      total += Number(props.expenseCategories[i].Planned);\n    }\n    return total * filteredDateRangeAdjustment();\n  }\n\n  function getPlannedIncome(){\n    var total = 0;\n    for(var i = 0; i < props.incomeCategories.length; i++){\n      total += Number(props.incomeCategories[i].Planned);\n    }\n    return total * filteredDateRangeAdjustment();\n  }\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={3}>\n        <h4>$<AnimatedNumber value={getPlannedIncome()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>Planned Income</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>-</h2>\n      </Grid>\n      <Grid item xs={3}>\n        <h4>$<AnimatedNumber value={getPlannedSpending()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>Planned Spending</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>=</h2>\n      </Grid>\n      <Grid item xs={4}>\n        <h4>$<AnimatedNumber value={getPlannedIncome() - getPlannedSpending()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>Planned Savings</h6>\n      </Grid>\n\n      <Grid item xs={3}>\n        <h4>$<AnimatedNumber value={getTotalIncome()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>Actual Income</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>-</h2>\n      </Grid>\n      <Grid item xs={3}>\n        <h4>$<AnimatedNumber value={getTotalSpent()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>Actual Spending</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>=</h2>\n      </Grid>\n      <Grid item xs={4}>\n        <h4>$<AnimatedNumber value={getTotalIncome() - getTotalSpent()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>Actually Saved</h6>\n      </Grid>\n\n      <Grid item xs={3}>\n        <h6 style={{marginTop:-10}}>------------------------</h6>\n      </Grid>\n      <Grid item xs={1}></Grid>\n      <Grid item xs={3}>\n        <h6 style={{marginTop:-10}}>------------------------</h6>\n      </Grid>\n      <Grid item xs={1}></Grid>\n      <Grid item xs={4}>\n        <h6 style={{marginTop:-10}}>------------------------</h6>\n      </Grid>\n\n      <Grid item xs={3}>\n        <h4>$<AnimatedNumber value={getPlannedIncome() - getTotalIncome()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>{((getTotalIncome()/getPlannedIncome()) * 100).toFixed(2)}%</h6>\n        <h6 style={{marginTop:-10}}>Compared Income</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>-</h2>\n      </Grid>\n      <Grid item xs={3}>\n        <h4>$<AnimatedNumber value={getPlannedSpending() - getTotalSpent()} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>{((getTotalSpent()/getPlannedSpending()) * 100).toFixed(2)}%</h6>\n        <h6 style={{marginTop:-10}}>Compared Spent</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>=</h2>\n      </Grid>\n      <Grid item xs={4}>\n        <h4>$<AnimatedNumber value={(getPlannedIncome() - getPlannedSpending()) - (getTotalIncome() - getTotalSpent())} formatValue={formatValue} /></h4>\n        <h6 style={{marginTop:-10}}>{(((getTotalIncome() - getTotalSpent())/(getPlannedIncome() - getPlannedSpending())) * 100).toFixed(2)}%</h6>\n        <h6 style={{marginTop:-10}}>Compared Saved</h6>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Metrics;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Transactions.js",["183"],"import React, {useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TransactionsGrid from './TransactionsGrid'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction Transactions(props) {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={4}></Grid>\n      <Grid item xs={4}><h3 style={{margin:0}}>Transactions</h3></Grid>\n      <Grid item xs={4}></Grid>\n\n      <Grid item xs={6}>\n        <Paper className={classes.paper}>\n          <TransactionsGrid \n            user = {props.user}\n            gridKey = {props.gridKey}\n            TransactionType = \"Expenses\"\n            transactions = {props.expenseTransactions}\n            setTransactions = {props.setExpenseTransactions}\n            filteredTransactions = {props.filteredExpenseTransactions}\n            setFilteredTransactions = {props.setFilteredTransactions}\n            setShowError = {props.setShowError} setErrorMessage={props.setErrorMessage}\n            categories = {props.expenseCategories}\n          />\n        </Paper>\n      </Grid>\n      <Grid item xs={6}>\n        <Paper className={classes.paper}>\n          <TransactionsGrid \n            user = {props.user}\n            gridKey = {props.gridKey}\n            TransactionType = \"Income\"\n            transactions = {props.incomeTransactions} setTransactions = {props.setIncomeTransactions}\n            filteredTransactions = {props.filteredIncomeTransactions} setFilteredTransactions = {props.setFilteredTransactions}\n            setShowError = {props.setShowError} setErrorMessage={props.setErrorMessage}\n            categories = {props.incomeCategories}\n          />\n        </Paper>\n      </Grid>\n    </Grid>     \n  );\n}\n\nexport default Transactions;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/constants.js",[],"/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarButtons.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208"],"import React, {useState} from 'react';\nimport {ButtonGroup, Button, Form} from 'react-bootstrap';\nimport Grid from '@material-ui/core/Grid';\nimport { DateRangePicker } from '@progress/kendo-react-dateinputs';\n\nDate.prototype.getWeek = function (dowOffset) {\n      dowOffset = typeof(dowOffset) == 'int' ? dowOffset : 0; \n      var newYear = new Date(this.getFullYear(),0,1);\n      var day = newYear.getDay() - dowOffset; \n      day = (day >= 0 ? day : day + 7);\n      var daynum = Math.floor((this.getTime() - newYear.getTime() - \n      (this.getTimezoneOffset()-newYear.getTimezoneOffset())*60000)/86400000) + 1;\n      var weeknum;\n      if(day < 4) {\n          weeknum = Math.floor((daynum+day-1)/7) + 1;\n          if(weeknum > 52) {\n              var nYear = new Date(this.getFullYear() + 1,0,1);\n              var nday = nYear.getDay() - dowOffset;\n              nday = nday >= 0 ? nday : nday + 7;\n              weeknum = nday < 4 ? 1 : 53;\n          }\n      } else { weeknum = Math.floor((daynum+day-1)/7);}\n      return weeknum;\n  };\n\nfunction BarButtons(props) {\n  const titles = [['Total Expenses', 'Expenses By Category'],['Total Income', 'Income By Category']]\n\n  function handleClick(button, buttonNum){\n    if(button == \"expenseIncome\"){\n      props.setExpenseIncomeButton(buttonNum); \n    }else if(button == \"totalCategory\"){\n      props.setTotalCategoryButton(buttonNum); \n    }\n    else if(button == \"date\"){\n      setDefaultDate(buttonNum)\n      props.setDateButton(buttonNum); \n    }\n    props.setBarKey(props.barKey + 1)\n  }\n\n  function setDefaultDate(buttonNum){\n    var today = new Date()\n    switch(buttonNum){\n      case 0:\n        var num = today.getDay() >= 1 ? 0 : 1\n        today.setDate(today.getDate()  - num)\n        setDateWeek(today.getFullYear(), today.getWeek())\n        break;\n      case 1:\n        setDateMonth(today.getFullYear(), today.getMonth())\n        break;\n      case 2:\n        setDateYear(\"Year To Date\")\n        break;\n      case 3:\n        setDateCustom(new Date(today.getFullYear(), 0, 1), today)\n        break;\n    }\n  }\n\n  function setDateWeek(year, week){\n    var days = (1 + (week - 1) * 7) + 3;\n    var newStartDate = new Date(year, 0, days);\n    var newEndDate = new Date(year, 0, days + 6)\n    props.setFilters(newStartDate, newEndDate)\n  }\n\n  function setDateMonth(year, month){\n    var newStartDate = new Date(year, month, 1)\n    var newEndDate = new Date(year, month + 1, 1)\n    newEndDate.setDate(newEndDate.getDate() - 1)\n    props.setFilters(newStartDate, newEndDate)\n  }\n\n  function setDateYear(year){\n    if(year == \"Year To Date\"){\n      var newStartDate = new Date((new Date()).getFullYear(), 0, 1)\n      var newEndDate = new Date()\n    }else{\n      var newStartDate = new Date(Number(year), 0, 1);\n      var newEndDate = new Date(Number(year) + 1, 0, 1);\n      newEndDate.setDate(newEndDate.getDate() - 1)\n    }\n    props.setFilters(newStartDate, newEndDate)\n  }\n\n  function setDateCustom(newStartDate, newEndDate){\n    props.setFilters(newStartDate, newEndDate)\n  }\n\n  function getDate(format){\n    var today = props.endDate;\n    var formattedDate = today.getFullYear().toString()\n    if(format == \"week\"){\n      formattedDate += (today.getWeek() - 1 >= 10 ? \"-W\" : \"-W0\")\n      formattedDate += (today.getWeek() - 1).toString()\n      return formattedDate\n    }else if(format == \"month\"){\n      formattedDate += (today.getMonth() + 1 >= 10 ? \"-\" : \"-0\")\n      formattedDate += (today.getMonth() + 1).toString()\n      return formattedDate\n    }else if(format == \"custom\"){\n      return { start: props.startDate, end: today }\n    }\n  }\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={9}>\n        <ButtonGroup size=\"sm\" style={{display: \"block\", float:'left', marginBottom:2}}>\n          <Button variant=\"success\" active={props.dateButton == 0 ? true : false} onClick={() => handleClick(\"date\", 0)}>Week</Button>\n          <Button variant=\"success\" active={props.dateButton == 1 ? true : false} onClick={() => handleClick(\"date\", 1)}>Month</Button>\n          <Button variant=\"success\" active={props.dateButton == 2 ? true : false} onClick={() => handleClick(\"date\", 2)}>Year</Button>\n          <Button variant=\"success\" active={props.dateButton == 3? true : false} onClick={() => handleClick(\"date\", 3)}>Custom</Button>\n        </ButtonGroup>\n        <br/><br/>\n        <div style={{display: \"block\", float:'left', height:30}}>\n          {props.dateButton == 0 && (\n            <Form.Control style={{marginTop:5, width:215}} type=\"week\" min=\"2020-W1\" max=\"2022-W1\" defaultValue ={getDate(\"week\")} onChange={(event)=>setDateWeek(Number(event.target.value.substring(0,4)), Number(event.target.value.substring(6)))}/>\n          )}\n          {props.dateButton == 1 && (\n            <Form.Control style={{marginTop:5, width:215}} type=\"month\" min=\"2020-01\" max=\"2022-01\" defaultValue ={getDate(\"month\")} onChange={(event)=>setDateMonth(Number(event.target.value.substring(0,4)), Number(event.target.value.substring(5)) - 1)}/>\n          )}\n          {props.dateButton == 2 && (\n            <Form.Control as=\"select\" style={{marginTop:5, width:215}} onChange={(event) => setDateYear(event.target.value)}>\n              <option>Year To Date</option>\n              <option>2020</option>\n              <option>2021</option>\n              <option>2022</option>\n            </Form.Control>\n          )}\n          {props.dateButton == 3 && (\n            <DateRangePicker defaultValue ={getDate(\"custom\")} onChange={(event)=> {if(event.target.value['start'] && event.target.value['end']){setDateCustom(event.target.value['start'], event.target.value['end'])}}}/>\n          )}\n        </div>\n      </Grid>\n      <Grid item xs={3}>\n        <ButtonGroup size=\"sm\" style={{float:'right', marginBottom:2}}>\n          <Button variant=\"success\" active={props.expenseIncomeButton == 0 ? true : false} onClick={() => handleClick(\"expenseIncome\", 0)}>Expenses</Button>\n          <Button variant=\"success\" active={props.expenseIncomeButton == 1 ? true : false} onClick={() => handleClick(\"expenseIncome\", 1)}>Income</Button>\n        </ButtonGroup>\n        <br/>\n        <ButtonGroup size=\"sm\" style={{float:'right'}}>\n          <Button variant=\"success\" active={props.totalCategoryButton == 0 ? true : false} onClick={() => handleClick(\"totalCategory\", 0)}>Total</Button>\n          <Button variant=\"success\" active={props.totalCategoryButton == 1 ? true : false} onClick={() => handleClick(\"totalCategory\", 1)}>By Category</Button>\n        </ButtonGroup>\n      </Grid>\n      <Grid item xs={2}></Grid>\n      <Grid item xs={7}>\n        <h5 style={{marginTop:25}}>{titles[props.expenseIncomeButton][props.totalCategoryButton]}</h5>\n        <h5 style={{marginTop:-10, marginBottom:0}}>{props.startDate.toLocaleDateString('en-US') + \" to \" + props.endDate.toLocaleDateString('en-US')} </h5>\n      </Grid>\n      <Grid item xs={2}></Grid>\n    </Grid>        \n  );\n}\n\nexport default BarButtons;\n","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/TransactionsGrid.js",["209","210","211","212","213","214","215","216"],"/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/ImportTransaction.js",["217","218","219","220","221","222","223"],"import React, {useState} from 'react'\nimport '../../App.css'\nimport { Modal, Nav, Button, Form } from 'react-bootstrap'\nimport Grid from '@material-ui/core/Grid';\nimport readXlsxFile from 'read-excel-file'\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport DeleteIcon from '@material-ui/icons/Delete';\nconst papa = require('papaparse');\n\nfunction ImportTransaction(props) {\n    const [rows, setRows] = useState(null)\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [importTransactions, setImportTransactions] = useState(null)\n    const [gridKey, setGridKey] = useState(0)\n\n    function onGridReady(params) {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n        params.api.sizeColumnsToFit()\n    }\n    \n    function CategoryCellRenderer(params){\n        return <Form.Control as=\"select\" defaultValue={params.value} style={{width:'100%'}} onChange={(event)=>{params.setValue(event.target.value)}}>\n                {props.categories.map((category) => \n                  <option key={category.CategoryId} value={category.CategoryId}>{category.CategoryName}</option>\n                )}\n              </Form.Control>\n    }\n\n    function DeleteCellRenderer(params){\n        return <Button variant=\"danger\" size=\"sm\" onClick={()=>{var trans = importTransactions; trans.splice(params.rowIndex, 1); setImportTransactions(trans); setGridKey(gridKey + 1)}}><DeleteIcon/></Button>\n    }\n\n    function onCellValueChanged(event){\n        var transactions = importTransactions;\n        transactions[event.rowIndex] = event.data;\n        setImportTransactions(transactions)\n      }\n\n    function readFile(){\n        var fileToImport = document.getElementById('fileToImport')\n        var importTrans = []\n        papa.parse(fileToImport.files[0], {\n            step: function(result) {\n                if(isNaN(result.data[6]) == false && result.data[6] > 0){\n                    var importResult = {TransactionId: 0, CategoryId: props.categories[0]['CategoryId'], CategoryName: result.data[4], Description: result.data[2], Amount : Number(result.data[6]), Date : result.data[0]}\n                    importTrans.push(importResult)\n                }\n            },\n            complete: function(results, file) {\n                setImportTransactions(importTrans)\n            }\n        });\n      }\n\n    function handleClose(){\n        setImportTransactions(null);\n        props.setShowImport(false);\n    }\n    \n    function handleImport(){\n        fetch('/AddTransactions', {\n            method : \"POST\",\n            headers : {\"Content-type\" : \"application/json\"},\n            body: JSON.stringify({\n              userId : props.user['userId'],\n              transactionType : props.TransactionType.replace('es', 'e'),\n              transactionsToAdd : importTransactions\n            })\n        })\n        .then(response => response.json())\n        .then(result => {\n          var transactions = result['transactions'];\n          for(var i = 0; i < transactions.length; i++){\n            var date = new Date(transactions[i]['Date']);\n            date.setDate(date.getDate() + 1)\n            transactions[i]['Date'] = date.toLocaleDateString()\n          }\n          props.setTransactions(transactions)\n          props.setFilteredTransactions(transactions, props.TransactionType.replace('es', 'e'))\n          handleClose()\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n    \n    return (\n    <Modal show={props.show} onHide={handleClose} dialogClassName=\"modalStyle\">\n        <Modal.Header>\n            <Modal.Title>Import {props.TransactionType}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n             <Grid container spacing={0}>\n                <Grid item xs={12}>\n                    <input id=\"fileToImport\" type=\"file\" onChange={readFile} style={{width:600, marginBottom:10}}/>\n                </Grid>\n                <Grid item xs={12}>\n                    {importTransactions && (\n                        <div className=\"ag-theme-alpine\" style={{ height: '100%', width:'100%' } }>\n                            <AgGridReact\n                                domLayout=\"autoHeight\"\n                                rowData = {importTransactions}\n                                onCellValueChanged = {onCellValueChanged}\n                                onGridReady = {onGridReady}\n                                key = {gridKey}\n                            >\n                                <AgGridColumn headerName=\"Original Category\" field=\"CategoryName\" width={160}></AgGridColumn>\n                                <AgGridColumn headerName=\"Category\" field=\"CategoryId\" width={160} editable resizable cellRendererFramework={CategoryCellRenderer} ></AgGridColumn>\n                                <AgGridColumn headerName=\"Description\" field=\"Description\" minWidth={400} maxWidth={800} editable resizable></AgGridColumn>\n                                <AgGridColumn headerName=\"Amount\" field=\"Amount\" width={125} editable></AgGridColumn>\n                                <AgGridColumn headerName=\"Date\" field=\"Date\" width={125} editable></AgGridColumn>\n                                <AgGridColumn headerName=\"Delete\" field=\"TransactionId\" width={100} cellRendererFramework={DeleteCellRenderer}></AgGridColumn>\n                            </AgGridReact>\n                        </div>\n                    )}\n                    \n                </Grid>\n            </Grid> \n        </Modal.Body>\n        <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleImport}>Import</Button>\n            <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n        </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ImportTransaction;","/Users/sasanhakimzadeh/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Error.js",["224","225","226","227","228"],"import React, {useState} from 'react'\nimport { Modal, Nav, Button } from 'react-bootstrap'\nimport Grid from '@material-ui/core/Grid';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Error(props) {\n    \n    return (\n    <Modal show={props.show} onHide={props.handleClose}>\n        <Modal.Header>\n            <Modal.Title>OOPSIE!</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            {props.message}\n        </Modal.Body>\n        <Modal.Footer>\n            <Button variant=\"secondary\" onClick={props.handleClose}>Close</Button>\n        </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default Error;",{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":34,"column":13,"nodeType":"235","messageId":"236","endLine":34,"endColumn":14},{"ruleId":"233","severity":1,"message":"237","line":35,"column":11,"nodeType":"235","messageId":"236","endLine":35,"endColumn":22},{"ruleId":"233","severity":1,"message":"238","line":36,"column":11,"nodeType":"235","messageId":"236","endLine":36,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":55,"column":18,"nodeType":"241","messageId":"242","endLine":55,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":59,"column":30,"nodeType":"241","messageId":"242","endLine":59,"endColumn":32},{"ruleId":"233","severity":1,"message":"234","line":74,"column":19,"nodeType":"235","messageId":"236","endLine":74,"endColumn":20},{"ruleId":"233","severity":1,"message":"243","line":75,"column":17,"nodeType":"235","messageId":"236","endLine":75,"endColumn":21},{"ruleId":"239","severity":1,"message":"240","line":31,"column":105,"nodeType":"241","messageId":"242","endLine":31,"endColumn":107},{"ruleId":"239","severity":1,"message":"244","line":71,"column":36,"nodeType":"241","messageId":"242","endLine":71,"endColumn":38},{"ruleId":"245","severity":1,"message":"246","line":6,"column":8,"nodeType":"235","messageId":"247","endLine":6,"endColumn":24},{"ruleId":"245","severity":1,"message":"248","line":7,"column":8,"nodeType":"235","messageId":"247","endLine":7,"endColumn":16},{"ruleId":"245","severity":1,"message":"249","line":15,"column":10,"nodeType":"235","messageId":"247","endLine":15,"endColumn":39},{"ruleId":"239","severity":1,"message":"240","line":63,"column":30,"nodeType":"241","messageId":"242","endLine":63,"endColumn":32},{"ruleId":"245","severity":1,"message":"250","line":1,"column":16,"nodeType":"235","messageId":"247","endLine":1,"endColumn":24},{"ruleId":"245","severity":1,"message":"251","line":4,"column":8,"nodeType":"235","messageId":"247","endLine":4,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":13,"column":15,"nodeType":"241","messageId":"242","endLine":13,"endColumn":17},{"ruleId":"239","severity":1,"message":"240","line":15,"column":21,"nodeType":"241","messageId":"242","endLine":15,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":45,"column":50,"nodeType":"241","messageId":"242","endLine":45,"endColumn":52},{"ruleId":"239","severity":1,"message":"240","line":52,"column":50,"nodeType":"241","messageId":"242","endLine":52,"endColumn":52},{"ruleId":"239","severity":1,"message":"240","line":61,"column":50,"nodeType":"241","messageId":"242","endLine":61,"endColumn":52},{"ruleId":"239","severity":1,"message":"240","line":68,"column":50,"nodeType":"241","messageId":"242","endLine":68,"endColumn":52},{"ruleId":"239","severity":1,"message":"240","line":75,"column":50,"nodeType":"241","messageId":"242","endLine":75,"endColumn":52},{"ruleId":"245","severity":1,"message":"252","line":11,"column":12,"nodeType":"235","messageId":"247","endLine":11,"endColumn":19},{"ruleId":"245","severity":1,"message":"253","line":12,"column":12,"nodeType":"235","messageId":"247","endLine":12,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":51,"column":38,"nodeType":"241","messageId":"242","endLine":51,"endColumn":40},{"ruleId":"245","severity":1,"message":"250","line":1,"column":16,"nodeType":"235","messageId":"247","endLine":1,"endColumn":24},{"ruleId":"245","severity":1,"message":"254","line":2,"column":13,"nodeType":"235","messageId":"247","endLine":2,"endColumn":21},{"ruleId":"245","severity":1,"message":"255","line":9,"column":3,"nodeType":"235","messageId":"247","endLine":9,"endColumn":20},{"ruleId":"245","severity":1,"message":"256","line":10,"column":3,"nodeType":"235","messageId":"247","endLine":10,"endColumn":24},{"ruleId":"239","severity":1,"message":"240","line":41,"column":37,"nodeType":"241","messageId":"242","endLine":41,"endColumn":39},{"ruleId":"257","severity":1,"message":"258","line":66,"column":34,"nodeType":"259","messageId":"260","endLine":66,"endColumn":40},{"ruleId":"257","severity":1,"message":"258","line":89,"column":34,"nodeType":"259","messageId":"260","endLine":89,"endColumn":40},{"ruleId":"239","severity":1,"message":"240","line":15,"column":28,"nodeType":"241","messageId":"242","endLine":15,"endColumn":30},{"ruleId":"233","severity":1,"message":"261","line":21,"column":13,"nodeType":"235","messageId":"236","endLine":21,"endColumn":20},{"ruleId":"239","severity":1,"message":"244","line":23,"column":18,"nodeType":"241","messageId":"242","endLine":23,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":34,"column":44,"nodeType":"241","messageId":"242","endLine":34,"endColumn":46},{"ruleId":"233","severity":1,"message":"234","line":36,"column":15,"nodeType":"235","messageId":"236","endLine":36,"endColumn":16},{"ruleId":"233","severity":1,"message":"261","line":40,"column":15,"nodeType":"235","messageId":"236","endLine":40,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":42,"column":17,"nodeType":"235","messageId":"236","endLine":42,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":46,"column":15,"nodeType":"235","messageId":"236","endLine":46,"endColumn":16},{"ruleId":"233","severity":1,"message":"261","line":47,"column":13,"nodeType":"235","messageId":"236","endLine":47,"endColumn":20},{"ruleId":"239","severity":1,"message":"244","line":49,"column":23,"nodeType":"241","messageId":"242","endLine":49,"endColumn":25},{"ruleId":"233","severity":1,"message":"234","line":56,"column":15,"nodeType":"235","messageId":"236","endLine":56,"endColumn":16},{"ruleId":"239","severity":1,"message":"240","line":77,"column":28,"nodeType":"241","messageId":"242","endLine":77,"endColumn":30},{"ruleId":"233","severity":1,"message":"261","line":88,"column":13,"nodeType":"235","messageId":"236","endLine":88,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":104,"column":44,"nodeType":"241","messageId":"242","endLine":104,"endColumn":46},{"ruleId":"233","severity":1,"message":"234","line":106,"column":15,"nodeType":"235","messageId":"236","endLine":106,"endColumn":16},{"ruleId":"233","severity":1,"message":"261","line":110,"column":15,"nodeType":"235","messageId":"236","endLine":110,"endColumn":22},{"ruleId":"233","severity":1,"message":"262","line":111,"column":13,"nodeType":"235","messageId":"236","endLine":111,"endColumn":21},{"ruleId":"233","severity":1,"message":"234","line":116,"column":17,"nodeType":"235","messageId":"236","endLine":116,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":121,"column":15,"nodeType":"235","messageId":"236","endLine":121,"endColumn":16},{"ruleId":"233","severity":1,"message":"261","line":122,"column":13,"nodeType":"235","messageId":"236","endLine":122,"endColumn":20},{"ruleId":"233","severity":1,"message":"263","line":123,"column":17,"nodeType":"235","messageId":"236","endLine":123,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":131,"column":15,"nodeType":"235","messageId":"236","endLine":131,"endColumn":16},{"ruleId":"239","severity":1,"message":"240","line":152,"column":28,"nodeType":"241","messageId":"242","endLine":152,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":163,"column":30,"nodeType":"241","messageId":"242","endLine":163,"endColumn":32},{"ruleId":"233","severity":1,"message":"261","line":173,"column":13,"nodeType":"235","messageId":"236","endLine":173,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":189,"column":44,"nodeType":"241","messageId":"242","endLine":189,"endColumn":46},{"ruleId":"233","severity":1,"message":"234","line":191,"column":15,"nodeType":"235","messageId":"236","endLine":191,"endColumn":16},{"ruleId":"233","severity":1,"message":"261","line":195,"column":15,"nodeType":"235","messageId":"236","endLine":195,"endColumn":22},{"ruleId":"233","severity":1,"message":"262","line":196,"column":13,"nodeType":"235","messageId":"236","endLine":196,"endColumn":21},{"ruleId":"233","severity":1,"message":"264","line":198,"column":13,"nodeType":"235","messageId":"236","endLine":198,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":203,"column":30,"nodeType":"241","messageId":"242","endLine":203,"endColumn":32},{"ruleId":"233","severity":1,"message":"234","line":208,"column":17,"nodeType":"235","messageId":"236","endLine":208,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":213,"column":15,"nodeType":"235","messageId":"236","endLine":213,"endColumn":16},{"ruleId":"233","severity":1,"message":"261","line":214,"column":13,"nodeType":"235","messageId":"236","endLine":214,"endColumn":20},{"ruleId":"233","severity":1,"message":"263","line":215,"column":17,"nodeType":"235","messageId":"236","endLine":215,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":223,"column":15,"nodeType":"235","messageId":"236","endLine":223,"endColumn":16},{"ruleId":"239","severity":1,"message":"240","line":240,"column":44,"nodeType":"241","messageId":"242","endLine":240,"endColumn":46},{"ruleId":"245","severity":1,"message":"250","line":1,"column":16,"nodeType":"235","messageId":"247","endLine":1,"endColumn":24},{"ruleId":"239","severity":1,"message":"240","line":18,"column":51,"nodeType":"241","messageId":"242","endLine":18,"endColumn":53},{"ruleId":"239","severity":1,"message":"240","line":19,"column":53,"nodeType":"241","messageId":"242","endLine":19,"endColumn":55},{"ruleId":"239","severity":1,"message":"240","line":22,"column":39,"nodeType":"241","messageId":"242","endLine":22,"endColumn":41},{"ruleId":"239","severity":1,"message":"240","line":24,"column":45,"nodeType":"241","messageId":"242","endLine":24,"endColumn":47},{"ruleId":"239","severity":1,"message":"240","line":27,"column":41,"nodeType":"241","messageId":"242","endLine":27,"endColumn":43},{"ruleId":"239","severity":1,"message":"240","line":49,"column":42,"nodeType":"241","messageId":"242","endLine":49,"endColumn":44},{"ruleId":"239","severity":1,"message":"240","line":49,"column":79,"nodeType":"241","messageId":"242","endLine":49,"endColumn":81},{"ruleId":"239","severity":1,"message":"240","line":49,"column":120,"nodeType":"241","messageId":"242","endLine":49,"endColumn":122},{"ruleId":"239","severity":1,"message":"240","line":50,"column":41,"nodeType":"241","messageId":"242","endLine":50,"endColumn":43},{"ruleId":"239","severity":1,"message":"240","line":50,"column":78,"nodeType":"241","messageId":"242","endLine":50,"endColumn":80},{"ruleId":"239","severity":1,"message":"240","line":50,"column":118,"nodeType":"241","messageId":"242","endLine":50,"endColumn":120},{"ruleId":"239","severity":1,"message":"240","line":56,"column":44,"nodeType":"241","messageId":"242","endLine":56,"endColumn":46},{"ruleId":"239","severity":1,"message":"240","line":56,"column":81,"nodeType":"241","messageId":"242","endLine":56,"endColumn":83},{"ruleId":"239","severity":1,"message":"240","line":56,"column":122,"nodeType":"241","messageId":"242","endLine":56,"endColumn":124},{"ruleId":"239","severity":1,"message":"240","line":57,"column":41,"nodeType":"241","messageId":"242","endLine":57,"endColumn":43},{"ruleId":"239","severity":1,"message":"240","line":57,"column":78,"nodeType":"241","messageId":"242","endLine":57,"endColumn":80},{"ruleId":"239","severity":1,"message":"240","line":57,"column":118,"nodeType":"241","messageId":"242","endLine":57,"endColumn":120},{"ruleId":"245","severity":1,"message":"250","line":1,"column":16,"nodeType":"235","messageId":"247","endLine":1,"endColumn":24},{"ruleId":"245","severity":1,"message":"250","line":1,"column":16,"nodeType":"235","messageId":"247","endLine":1,"endColumn":24},{"ruleId":"245","severity":1,"message":"250","line":1,"column":16,"nodeType":"235","messageId":"247","endLine":1,"endColumn":24},{"ruleId":"265","severity":1,"message":"266","line":6,"column":1,"nodeType":"267","messageId":"242","endLine":24,"endColumn":4},{"ruleId":"268","severity":1,"message":"269","line":7,"column":40,"nodeType":"259","messageId":"270","endLine":7,"endColumn":45},{"ruleId":"239","severity":1,"message":"240","line":30,"column":15,"nodeType":"241","messageId":"242","endLine":30,"endColumn":17},{"ruleId":"239","severity":1,"message":"240","line":32,"column":21,"nodeType":"241","messageId":"242","endLine":32,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":35,"column":20,"nodeType":"241","messageId":"242","endLine":35,"endColumn":22},{"ruleId":"271","severity":1,"message":"272","line":44,"column":5,"nodeType":"273","messageId":"274","endLine":59,"endColumn":6},{"ruleId":"239","severity":1,"message":"240","line":77,"column":13,"nodeType":"241","messageId":"242","endLine":77,"endColumn":15},{"ruleId":"233","severity":1,"message":"275","line":81,"column":11,"nodeType":"235","messageId":"236","endLine":81,"endColumn":23},{"ruleId":"233","severity":1,"message":"276","line":82,"column":11,"nodeType":"235","messageId":"236","endLine":82,"endColumn":21},{"ruleId":"239","severity":1,"message":"240","line":95,"column":15,"nodeType":"241","messageId":"242","endLine":95,"endColumn":17},{"ruleId":"239","severity":1,"message":"240","line":99,"column":21,"nodeType":"241","messageId":"242","endLine":99,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":103,"column":21,"nodeType":"241","messageId":"242","endLine":103,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":112,"column":62,"nodeType":"241","messageId":"242","endLine":112,"endColumn":64},{"ruleId":"239","severity":1,"message":"240","line":113,"column":62,"nodeType":"241","messageId":"242","endLine":113,"endColumn":64},{"ruleId":"239","severity":1,"message":"240","line":114,"column":62,"nodeType":"241","messageId":"242","endLine":114,"endColumn":64},{"ruleId":"239","severity":1,"message":"240","line":115,"column":62,"nodeType":"241","messageId":"242","endLine":115,"endColumn":64},{"ruleId":"239","severity":1,"message":"240","line":119,"column":29,"nodeType":"241","messageId":"242","endLine":119,"endColumn":31},{"ruleId":"239","severity":1,"message":"240","line":122,"column":29,"nodeType":"241","messageId":"242","endLine":122,"endColumn":31},{"ruleId":"239","severity":1,"message":"240","line":125,"column":29,"nodeType":"241","messageId":"242","endLine":125,"endColumn":31},{"ruleId":"239","severity":1,"message":"240","line":133,"column":29,"nodeType":"241","messageId":"242","endLine":133,"endColumn":31},{"ruleId":"239","severity":1,"message":"240","line":140,"column":71,"nodeType":"241","messageId":"242","endLine":140,"endColumn":73},{"ruleId":"239","severity":1,"message":"240","line":141,"column":71,"nodeType":"241","messageId":"242","endLine":141,"endColumn":73},{"ruleId":"239","severity":1,"message":"240","line":145,"column":71,"nodeType":"241","messageId":"242","endLine":145,"endColumn":73},{"ruleId":"239","severity":1,"message":"240","line":146,"column":71,"nodeType":"241","messageId":"242","endLine":146,"endColumn":73},{"ruleId":"245","severity":1,"message":"277","line":8,"column":10,"nodeType":"235","messageId":"247","endLine":8,"endColumn":17},{"ruleId":"245","severity":1,"message":"252","line":11,"column":10,"nodeType":"235","messageId":"247","endLine":11,"endColumn":17},{"ruleId":"245","severity":1,"message":"253","line":12,"column":10,"nodeType":"235","messageId":"247","endLine":12,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":27,"column":13,"nodeType":"235","messageId":"236","endLine":27,"endColumn":14},{"ruleId":"239","severity":1,"message":"240","line":55,"column":32,"nodeType":"241","messageId":"242","endLine":55,"endColumn":34},{"ruleId":"239","severity":1,"message":"240","line":86,"column":36,"nodeType":"241","messageId":"242","endLine":86,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":147,"column":34,"nodeType":"241","messageId":"242","endLine":147,"endColumn":36},{"ruleId":"239","severity":1,"message":"240","line":158,"column":32,"nodeType":"241","messageId":"242","endLine":158,"endColumn":34},{"ruleId":"245","severity":1,"message":"278","line":3,"column":17,"nodeType":"235","messageId":"247","endLine":3,"endColumn":20},{"ruleId":"245","severity":1,"message":"279","line":5,"column":8,"nodeType":"235","messageId":"247","endLine":5,"endColumn":20},{"ruleId":"245","severity":1,"message":"280","line":13,"column":12,"nodeType":"235","messageId":"247","endLine":13,"endColumn":16},{"ruleId":"245","severity":1,"message":"281","line":13,"column":18,"nodeType":"235","messageId":"247","endLine":13,"endColumn":25},{"ruleId":"245","severity":1,"message":"252","line":14,"column":12,"nodeType":"235","messageId":"247","endLine":14,"endColumn":19},{"ruleId":"245","severity":1,"message":"253","line":15,"column":12,"nodeType":"235","messageId":"247","endLine":15,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":48,"column":42,"nodeType":"241","messageId":"242","endLine":48,"endColumn":44},{"ruleId":"245","severity":1,"message":"250","line":1,"column":16,"nodeType":"235","messageId":"247","endLine":1,"endColumn":24},{"ruleId":"245","severity":1,"message":"278","line":2,"column":17,"nodeType":"235","messageId":"247","endLine":2,"endColumn":20},{"ruleId":"245","severity":1,"message":"282","line":3,"column":8,"nodeType":"235","messageId":"247","endLine":3,"endColumn":12},{"ruleId":"245","severity":1,"message":"283","line":4,"column":10,"nodeType":"235","messageId":"247","endLine":4,"endColumn":22},{"ruleId":"245","severity":1,"message":"284","line":4,"column":24,"nodeType":"235","messageId":"247","endLine":4,"endColumn":35},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"no-redeclare","'i' is already defined.","Identifier","redeclared","'transaction' is already defined.","'transDate' is already defined.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'date' is already defined.","Expected '!==' and instead saw '!='.","no-unused-vars","'FormControlLabel' is defined but never used.","unusedVar","'Checkbox' is defined but never used.","'SentimentDissatisfiedOutlined' is defined but never used.","'useState' is defined but never used.","'SettingsIcon' is defined but never used.","'gridApi' is assigned a value but never used.","'gridColumnApi' is assigned a value but never used.","'ReactDOM' is defined but never used.","'ChartCategoryAxis' is defined but never used.","'ChartCategoryAxisItem' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'curDate' is already defined.","'nextDate' is already defined.","'index' is already defined.","'isLastDate' is already defined.","no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","valid-typeof","Invalid typeof comparison value.","invalidValue","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'newStartDate' is already defined.","'newEndDate' is already defined.","'GridApi' is defined but never used.","'Nav' is defined but never used.","'readXlsxFile' is defined but never used.","'rows' is assigned a value but never used.","'setRows' is assigned a value but never used.","'Grid' is defined but never used.","'AgGridColumn' is defined but never used.","'AgGridReact' is defined but never used.","no-global-assign","no-unsafe-negation"]