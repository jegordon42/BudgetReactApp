[{"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/index.js":"1","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/reportWebVitals.js":"2","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/App.js":"3","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Dashboard.js":"4","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Login.js":"5","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Header.js":"6","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/SignUp.js":"7","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Settings.js":"8","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Metrics.js":"9","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Compared.js":"10","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Transactions.js":"11","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieButtons.js":"12","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieChart.js":"13","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarChart.js":"14","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/TransactionsGrid.js":"15","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/ImportTransaction.js":"16","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarButtons.js":"17"},{"size":500,"mtime":1610911852318,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1610911852319,"results":"20","hashOfConfig":"19"},{"size":2533,"mtime":1610911852308,"results":"21","hashOfConfig":"19"},{"size":4715,"mtime":1610911852309,"results":"22","hashOfConfig":"19"},{"size":4872,"mtime":1612305759575,"results":"23","hashOfConfig":"19"},{"size":1206,"mtime":1611191088370,"results":"24","hashOfConfig":"19"},{"size":4989,"mtime":1611012015304,"results":"25","hashOfConfig":"19"},{"size":6826,"mtime":1611012046332,"results":"26","hashOfConfig":"19"},{"size":3456,"mtime":1612231871093,"results":"27","hashOfConfig":"19"},{"size":3292,"mtime":1610911852311,"results":"28","hashOfConfig":"19"},{"size":1555,"mtime":1610911852315,"results":"29","hashOfConfig":"19"},{"size":2807,"mtime":1612307103459,"results":"30","hashOfConfig":"19"},{"size":2846,"mtime":1610911852314,"results":"31","hashOfConfig":"19"},{"size":4411,"mtime":1612306623216,"results":"32","hashOfConfig":"19"},{"size":6192,"mtime":1611272796569,"results":"33","hashOfConfig":"19"},{"size":3016,"mtime":1611012032813,"results":"34","hashOfConfig":"19"},{"size":3466,"mtime":1612306977744,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1rna1u9",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"38"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/index.js",[],["81","82"],"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/reportWebVitals.js",[],"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/App.js",[],"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Dashboard.js",["83","84"],"import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Settings from './DashboardComponents/Settings'\nimport PieChart from './DashboardComponents/PieChart'\nimport PieButtons from './DashboardComponents/PieButtons'\nimport BarChart from './DashboardComponents/BarChart'\nimport Transactions from './DashboardComponents/Transactions'\nimport Metrics from './DashboardComponents/Metrics'\nimport Compared from './DashboardComponents/Compared'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin:10\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction Dashboard(props) {\n  const classes = useStyles();\n  const [pieKey, setPieKey] = useState(1)\n  const [barKey, setBarKey] = useState(1)\n  const [gridKey, setGridKey] = useState(1)\n  const [pieIncomeExpenseButton, setPieIncomeExpenseButton] = useState(0)\n  const [pieActualPlannedButton, setPieActualPlannedButton] = useState(props.expenseTransactions.length == 0 ? 1 : 0)\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={2}>\n        <Grid item xs={7}>\n          <Paper className={classes.paper} style={{height:'500'}}>\n            <BarChart\n              barKey = {barKey}\n              setBarKey = {setBarKey}\n              expenseCategories = {props.expenseCategories}\n              incomeCategories = {props.incomeCategories}\n              expenseTransactions = {props.expenseTransactions}\n              incomeTransactions = {props.incomeTransactions}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={5}>\n          <Paper className={classes.paper}>\n            <Metrics \n              expenseTransactions = {props.expenseTransactions}\n              incomeTransactions = {props.incomeTransactions}\n              expenseCategories = {props.expenseCategories}\n              incomeCategories = {props.incomeCategories}\n            />\n          </Paper>\n          <br/>\n          <Paper className={classes.paper} style={{display:'flex', flexDirection:'column', minHeight:'200' }}> \n            <PieButtons\n              pieKey = {pieKey}\n              setPieKey = {setPieKey}\n              pieIncomeExpenseButton = {pieIncomeExpenseButton}\n              setPieIncomeExpenseButton = {setPieIncomeExpenseButton}\n              pieActualPlannedButton = {pieActualPlannedButton}\n              setPieActualPlannedButton = {setPieActualPlannedButton}\n            />\n           {pieActualPlannedButton != 2 && (\n              <PieChart\n                pieKey = {pieKey}\n                pieIncomeExpenseButton = {pieIncomeExpenseButton}\n                pieActualPlannedButton = {pieActualPlannedButton}\n                incomeCategories = {props.incomeCategories}\n                expenseCategories = {props.expenseCategories}\n                expenseTransactions = {props.expenseTransactions}\n                incomeTransactions = {props.incomeTransactions}\n              />\n          )}\n          {pieActualPlannedButton === 2 && (\n            <Compared\n              pieIncomeExpenseButton = {pieIncomeExpenseButton}\n              incomeCategories = {props.incomeCategories}\n              expenseCategories = {props.expenseCategories}\n              expenseTransactions = {props.expenseTransactions}\n              incomeTransactions = {props.incomeTransactions}\n            />\n          )}\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>  \n            <Transactions \n              user = {props.user}\n              gridKey = {gridKey}\n              expenseTransactions = {props.expenseTransactions}\n              setExpenseTransactions = {props.setExpenseTransactions}\n              incomeTransactions = {props.incomeTransactions}\n              setIncomeTransactions = {props.setIncomeTransactions}\n              expenseCategories = {props.expenseCategories}\n              incomeCategories = {props.incomeCategories}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n      <Settings \n        show={props.showSettings} \n        user={props.user}\n        incomeTransactions={props.incomeTransactions}\n        expenseTransactions={props.expenseTransactions}\n        expenseCategories={props.expenseCategories} \n        setExpenseCategories = {props.setExpenseCategories}\n        incomeCategories = {props.incomeCategories}\n        setIncomeCategories = {props.setIncomeCategories}\n        handleClose={() => {props.setShowSettings(false); setGridKey(gridKey + 1)}}\n      />\n    </div>\n  );\n}\n\nexport default Dashboard;\n","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Login.js",["85","86","87"],"import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Joe's Money App\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login(props) {\n  const classes = useStyles();\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n\n  function handleLogin(){\n    fetch('/Login?email=' + email + '&password=' + password)\n      .then(response => response.json())\n      .then(result => {\n        if(result['message'] == 'Success'){\n          props.setUser(result['user']);\n          props.setExpenseCategories(result['expenseCategories']);\n          props.setIncomeCategories(result['incomeCategories']);\n\n          var expenseTransactions = result['expenseTransactions'];\n          for(var i = 0; i < expenseTransactions.length; i++){\n            var date = new Date(expenseTransactions[i]['Date']);\n            date.setDate(date.getDate() + 1)\n            expenseTransactions[i]['Date'] = date.toLocaleDateString()\n          }\n          props.setExpenseTransactions(expenseTransactions)\n\n          var incomeTransactions = result['incomeTransactions'];\n          for(var i = 0; i < incomeTransactions.length; i++){\n            var date = new Date(incomeTransactions[i]['Date']);\n            date.setDate(date.getDate() + 1)\n            incomeTransactions[i]['Date'] = date.toLocaleDateString()\n          }\n          props.setIncomeTransactions(incomeTransactions)\n\n          props.setPage(\"dashboard\")\n        }\n        else{\n          setMessage(result['message'])\n        }\n      })\n      .catch(e => {\n          console.log(e);\n      });\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            onChange={(event) => setEmail(event.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={(event) => setPassword(event.target.value)}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          {message}\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleLogin}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link onClick={() => props.setPage(\"signUp\")} variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/Header.js",[],"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/SignUp.js",["88","89","90","91"],"import React, { useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { SentimentDissatisfiedOutlined } from '@material-ui/icons';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n      Joe's Money App\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp(props) {\n  const classes = useStyles();\n  const [firstName, setFirstName] = useState(\"\")\n  const [lastName, setLastName] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  function handleSignUp(){\n    fetch('/SignUp?firstName=' + firstName + '&lastName=' + lastName + '&email=' + email + '&password=' + password)\n      .then(response => response.json())\n      .then(result => {\n        if(result['message'] == 'Success'){\n          props.setUser(result['user']);\n          props.setExpenseCategories(result['expenseCategories']);\n          props.setIncomeCategories(result['incomeCategories']);\n          props.setExpenseTransactions([])\n          props.setIncomeTransactions([])\n          props.setPage(\"dashboard\")\n        }\n      })\n      .catch(e => {\n          console.log(e);\n      });\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                onChange={(event) => setFirstName(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                autoComplete=\"lname\"\n                onChange={(event) => setLastName(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange={(event) => setEmail(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={(event) => setPassword(event.target.value)}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleSignUp}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link onClick={() => props.setPage(\"login\")} variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Settings.js",["92","93","94"],"import React, {useState} from 'react'\nimport { Modal, Nav, Button } from 'react-bootstrap'\nimport Grid from '@material-ui/core/Grid';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Settings(props) {\n    const [selectedTab, setSelectedTab] = useState(\"Expense\") \n    const [selectedCategories, setSelectedCategories] = useState([])\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n\n    function handleClose(){\n        props.handleClose()\n        setSelectedTab(\"Expense\")\n    }\n\n    function addCategory(){\n        var categoriesToUpdate = selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories;\n        var categories = categoriesToUpdate.concat([{CategoryId: 0, CategoryName: \"\", Planned: 0}]);\n        saveCategories(categories, selectedTab)\n    }\n\n    function deleteCategory(){\n        var categories = [];\n        var categoriesToUpdate = selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories;\n        for(var i = 0; i < categoriesToUpdate.length; i++){\n            var category = categoriesToUpdate[i];\n            if(!selectedCategories.includes(category.CategoryId))\n                categories.push(category);\n            else{\n                var transactions = selectedTab===\"Expense\" ? props.expenseTransactions : props.incomeTransactions;\n                for(var x = 0; x < transactions.length; x++){\n                    if(transactions[x].CategoryId === category.CategoryId){\n                        alert('One of the selected Categories to be deleted is used in one or more transactions. Please make sure to change existing transactions to not include this category. In an upcoming update, you will be able to select a different category from here to switch the transactions to.')\n                        return;\n                    }\n                }\n            } \n\n\n        }\n        saveCategories(categories, selectedTab);\n    }\n\n    function CheckBoxCellRenderer(params){\n        return <input   type=\"checkbox\" \n                        onChange={() => {\n                            var index = selectedCategories.indexOf(params.data.CategoryId); \n                            if(index == -1){\n                                selectedCategories.push(params.data.CategoryId);\n                            }else{\n                                selectedCategories.splice(index, 1);\n                            }\n                            setSelectedCategories(selectedCategories);\n                        }}\n                />\n    }\n\n    function onGridReady(params) {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    }\n\n    function onCellValueChanged(event){\n        var categoriesToUpdate = selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories;\n        categoriesToUpdate[event.rowIndex] = event.data\n        saveCategories(categoriesToUpdate, selectedTab);\n    }\n\n    function saveCategories(categories, categoryType){\n        fetch('/UpdateCategories', {\n            method : \"POST\",\n            headers : {\"Content-type\" : \"application/json\"},\n            body: JSON.stringify({\n                userId : props.user['userId'],\n                categoryType : categoryType,\n                categories : categories\n            })\n        })\n        .then(response => response.json())\n        .then(result => {\n            if(categoryType === \"Expense\"){\n                props.setExpenseCategories(result['categories'])\n            }else{\n                props.setIncomeCategories(result['categories'])\n            }\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n\n    return (\n    <Modal show={props.show} onHide={handleClose}>\n        <Modal.Header>\n            <Modal.Title>Settings</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Nav fill variant=\"tabs\" defaultActiveKey=\"link-1\" style={{marginBottom:15}}>\n                <Nav.Item onClick={() => setSelectedTab(\"Expense\")}>\n                    <Nav.Link eventKey=\"link-1\">Expense</Nav.Link>\n                </Nav.Item>\n                <Nav.Item onClick={() => setSelectedTab(\"Income\")}>\n                    <Nav.Link eventKey=\"link-2\">Income</Nav.Link>\n                </Nav.Item>\n                <Nav.Item onClick={() => setSelectedTab(\"Profile\")}>\n                    <Nav.Link eventKey=\"link-3\">Profile</Nav.Link>\n                </Nav.Item>\n            </Nav>\n            {(selectedTab===\"Expense\" || selectedTab===\"Income\") && (\n                <div>\n                    <Grid container spacing={0}>\n                        <Grid item xs={6}>\n                            <h5 style={{marginTop:7}}>Categories</h5>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button variant=\"danger\" size=\"sm\" style={{float:'right'}} onClick={deleteCategory}>Delete</Button>\n                            <Button variant=\"primary\" size=\"sm\" style={{float:'right', marginRight:5}} onClick={addCategory}>Add</Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <div className=\"ag-theme-alpine\" style={{ height: '100%', width: '100%' } }>\n                                <AgGridReact\n                                    rowData={selectedTab===\"Expense\" ? props.expenseCategories : props.incomeCategories}\n                                    domLayout=\"autoHeight\"\n                                    onCellValueChanged={onCellValueChanged}\n                                    onGridReady={onGridReady}\n                                    frameworkComponents={{CheckBoxCellRenderer: CheckBoxCellRenderer}}\n                                >\n                                    <AgGridColumn headerName=\"\" field=\"CategoryId\" width={50} cellRendererFramework={CheckBoxCellRenderer} ></AgGridColumn>\n                                    <AgGridColumn headerName=\"Name\" field=\"CategoryName\" editable></AgGridColumn>\n                                    <AgGridColumn headerName=\"Planned\" field=\"Planned\" valueFormatter={(params) => {return \"$\" + params.data.Planned}} editable></AgGridColumn>\n                                </AgGridReact>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </div>\n            )}   \n            {selectedTab===\"Profile\" && (\n                <div>\n                    <h1>Profile</h1>\n                </div>\n            )}    \n        </Modal.Body>\n        <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n        </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default Settings;","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Metrics.js",["95"],"import React, {useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nfunction Metrics(props) {\n\n  function getTotalSpent(){\n    var total = 0;\n    for(var i = 0; i < props.expenseTransactions.length; i++){\n      total += props.expenseTransactions[i].Amount;\n    }\n    return total;\n  }\n\n  function getTotalIncome(){\n    var total = 0;\n    for(var i = 0; i < props.incomeTransactions.length; i++){\n      total += props.incomeTransactions[i].Amount;\n    }\n    return total;\n  }\n  \n  function getPlannedSpending(){\n    var total = 0;\n    for(var i = 0; i < props.expenseCategories.length; i++){\n      total += props.expenseCategories[i].Planned;\n    }\n    return total;\n  }\n\n  function getPlannedIncome(){\n    var total = 0;\n    for(var i = 0; i < props.incomeCategories.length; i++){\n      total += props.incomeCategories[i].Planned;\n    }\n    return total;\n  }\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={3}>\n        <h4>${getPlannedIncome()}</h4>\n        <h6 style={{marginTop:-10}}>Planned Income</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>-</h2>\n      </Grid>\n      <Grid item xs={3}>\n        <h4>${getPlannedSpending()}</h4>\n        <h6 style={{marginTop:-10}}>Planned Spending</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>=</h2>\n      </Grid>\n      <Grid item xs={4}>\n        <h4>${(getPlannedIncome() - getPlannedSpending()).toFixed(2)}</h4>\n        <h6 style={{marginTop:-10}}>Planned Savings</h6>\n      </Grid>\n\n      <Grid item xs={3}>\n        <h4>${getTotalIncome()}</h4>\n        <h6 style={{marginTop:-10}}>Actual Income</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>-</h2>\n      </Grid>\n      <Grid item xs={3}>\n        <h4>${getTotalSpent()}</h4>\n        <h6 style={{marginTop:-10}}>Actual Spending</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>=</h2>\n      </Grid>\n      <Grid item xs={4}>\n        <h4>${(getTotalIncome() - getTotalSpent()).toFixed(2)}</h4>\n        <h6 style={{marginTop:-10}}>Actually Saved</h6>\n      </Grid>\n\n      <Grid item xs={3}>\n        <h6 style={{marginTop:-10}}>------------------------</h6>\n      </Grid>\n      <Grid item xs={1}></Grid>\n      <Grid item xs={3}>\n        <h6 style={{marginTop:-10}}>------------------------</h6>\n      </Grid>\n      <Grid item xs={1}></Grid>\n      <Grid item xs={4}>\n        <h6 style={{marginTop:-10}}>------------------------</h6>\n      </Grid>\n\n      <Grid item xs={3}>\n        <h4>${(getPlannedIncome() - getTotalIncome()).toFixed(2)}</h4>\n        <h6 style={{marginTop:-10}}>{((getTotalIncome()/getPlannedIncome()) * 100).toFixed(2)}%</h6>\n        <h6 style={{marginTop:-10}}>Compared Income</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>-</h2>\n      </Grid>\n      <Grid item xs={3}>\n        <h4>${(getPlannedSpending() - getTotalSpent()).toFixed(2)}</h4>\n        <h6 style={{marginTop:-10}}>{((getTotalSpent()/getPlannedSpending()) * 100).toFixed(2)}%</h6>\n        <h6 style={{marginTop:-10}}>Compared Spent</h6>\n      </Grid>\n      <Grid item xs={1}>\n        <h2>=</h2>\n      </Grid>\n      <Grid item xs={4}>\n        <h4>${((getPlannedIncome() - getPlannedSpending()) - (getTotalIncome() - getTotalSpent())).toFixed(2)}</h4>\n        <h6 style={{marginTop:-10}}>{(((getTotalIncome() - getTotalSpent())/(getPlannedIncome() - getPlannedSpending())) * 100).toFixed(2)}%</h6>\n        <h6 style={{marginTop:-10}}>Compared Saved</h6>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Metrics;\n","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Compared.js",["96","97","98","99","100","101","102"],"import React, {useState} from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  Chart,\n  ChartTitle,\n  ChartTooltip,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartCategoryAxis,\n  ChartCategoryAxisItem,\n  ChartValueAxis,\n  ChartValueAxisItem\n} from '@progress/kendo-react-charts';\n\nfunction Compared(props) {\n\n  const tooltipRender = ({ point }) => {\n    const { value } = point;\n\n    return (\n      <span>\n        Planned: ${ value.target }\n        <br />\n        Actual: ${ value.current }\n        <br />\n        Diff: ${ value.target - value.current }\n      </span>\n    )\n  };\n\n  function getActualAmount(transactions, categoryId){\n    var total = 0;\n    for(var i = 0; i < transactions.length; i++){\n      if(transactions[i].CategoryId == categoryId){\n        total += transactions[i].Amount;\n      }\n    }\n    return total;\n  }\n\n  return (\n    <div style={{height:240, overflow: 'scroll'}}>\n      {props.pieIncomeExpenseButton === 0 && props.expenseCategories.map((category) => {\n        var actualAmount = getActualAmount(props.expenseTransactions, category.CategoryId);\n        var max = actualAmount < category.Planned ? category.Planned * 2 : ((actualAmount / category.Planned) + 1) * category.Planned\n        return (\n          <Chart style={{ height: 80 }}>\n            <ChartTitle text={category.CategoryName} align=\"left\"/>\n            <ChartSeries >\n                <ChartSeriesItem type=\"bullet\" color=\"#4361EE\" data={[[actualAmount, category.Planned]]} />\n            </ChartSeries>\n            <ChartValueAxis>\n              <ChartValueAxisItem \n                majorGridLines={{ visible: false }} \n                minorTicks={{ visible: false }} \n                min={0} \n                max={max} \n                labels={{format: \"${0}\"}} \n                plotBands={[{from: 0, to: category.Planned, color: 'lightgreen', opacity: .3}, {from: category.Planned, to: max, color: '#FFC6FF', opacity: .2}]} \n              />\n            </ChartValueAxis>\n            <ChartTooltip render={tooltipRender} background=\"white\"/>\n          </Chart>)\n        })}\n      {props.pieIncomeExpenseButton === 1 && props.incomeCategories.map((category) => {\n        var actualAmount = getActualAmount(props.incomeTransactions, category.CategoryId);\n        var max = actualAmount < category.Planned ? category.Planned * 2 : ((actualAmount / category.Planned) + 1) * category.Planned\n        return (\n          <Chart style={{ height: 80 }}>\n            <ChartTitle text={category.CategoryName} align=\"left\"/>\n            <ChartSeries >\n                <ChartSeriesItem type=\"bullet\" color=\"#4361EE\" data={[[actualAmount, category.Planned]]} />\n            </ChartSeries>\n            <ChartValueAxis>\n              <ChartValueAxisItem \n                majorGridLines={{ visible: false }} \n                minorTicks={{ visible: false }} \n                min={0} \n                max={max} \n                labels={{format: \"${0}\"}} \n                plotBands={[{from: 0, to: category.Planned, color: '#FFC6FF', opacity: .3}, {from: category.Planned, to: max, color: 'lightgreen', opacity: .2}]}\n              />\n            </ChartValueAxis>\n            <ChartTooltip render={tooltipRender} background=\"white\"/>\n          </Chart>)\n        })}\n    </div>\n  );\n}\n\nexport default Compared;\n","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/Transactions.js",["103"],"import React, {useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TransactionsGrid from './TransactionsGrid'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction Transactions(props) {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={4}></Grid>\n      <Grid item xs={4}><h3 style={{margin:0}}>Transactions</h3></Grid>\n      <Grid item xs={4}></Grid>\n\n      <Grid item xs={6}>\n        <Paper className={classes.paper}>\n          <TransactionsGrid \n            user = {props.user}\n            gridKey = {props.gridKey}\n            TransactionType = \"Expenses\"\n            transactions = {props.expenseTransactions}\n            setTransactions = {props.setExpenseTransactions}\n            categories = {props.expenseCategories}\n          />\n        </Paper>\n      </Grid>\n      <Grid item xs={6}>\n        <Paper className={classes.paper}>\n          <TransactionsGrid \n            user = {props.user}\n            gridKey = {props.gridKey}\n            TransactionType = \"Income\"\n            transactions = {props.incomeTransactions}\n            setTransactions = {props.setIncomeTransactions}\n            categories = {props.incomeCategories}\n          />\n        </Paper>\n      </Grid>\n    </Grid>     \n  );\n}\n\nexport default Transactions;\n","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieButtons.js",["104","105","106","107","108","109","110","111","112"],"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/PieChart.js",["113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"import React, {useState} from 'react';\nimport {Pie} from 'react-chartjs-2';\n\nfunction PieChart(props) {\n\n  function getPieChartData(){\n    var pieLabels = [];\n    var pieData = [];\n\n    var categories = props.pieIncomeExpenseButton == 0 ? props.expenseCategories : props.incomeCategories;\n    var transactions = props.pieIncomeExpenseButton == 0 ? props.expenseTransactions : props.incomeTransactions;\n    for(var i = 0; i < categories.length; i++){\n      pieLabels.push(categories[i].CategoryName)\n      if(props.pieActualPlannedButton == 1){\n        pieData.push(categories[i].Planned)\n      }else if(props.pieActualPlannedButton == 0){\n        pieData.push(0)\n        for(var x = 0; x < transactions.length; x++){\n          if(transactions[x].CategoryId == categories[i].CategoryId){\n            pieData[i] += transactions[x].Amount;\n          }\n        }\n      }\n    }\n\n    var pieChartData = {\n      labels: pieLabels,\n      datasets: [\n        {\n          label: 'Categories',\n          backgroundColor: [\n            '#FFADAD',\n            '#FFD6A5',\n            '#FDFFB6',\n            '#CAFFBF',\n            '#9BF6FF',\n            '#A0C4FF',\n            '#BDB2FF',\n            '#FFC6FF',\n            '#F72585',\n            '#7209B7',\n            '#4361EE'\n          ],\n          data: pieData\n        }\n      ]\n    }\n    return pieChartData\n  }\n\n  return (\n    <div>\n        { ((props.pieIncomeExpenseButton == 0 && props.pieActualPlannedButton == 0 && props.expenseTransactions.length == 0) ||\n          (props.pieIncomeExpenseButton == 1 && props.pieActualPlannedButton == 0 && props.incomeTransactions.length == 0)) && \n          <div style={{height:235}}>\n            <br/><br/><br/>\n            <h1>No Data available</h1>\n          </div>\n        }\n        { (!((props.pieIncomeExpenseButton == 0 && props.pieActualPlannedButton == 0 && props.expenseTransactions.length == 0) ||\n          (props.pieIncomeExpenseButton == 1 && props.pieActualPlannedButton == 0 && props.incomeTransactions.length == 0))) && \n          <Pie\n            height = {235}\n            data={getPieChartData()}\n            options={{\n              animation:{duration:1000, easing:'easeInOutCubic'},\n              maintainAspectRatio:false,\n              legend:{\n                display:true,\n                position:'right'\n              },\n              tooltips: {\n                callbacks: {\n                    label: function(tooltipItem, data) {\n                        var label = data.labels[tooltipItem.index]\n                        var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n                        label += ': $' + value;\n                        return label;\n                    }\n                }\n              }\n            }}\n          />\n        }\n       \n    </div>\n  );\n}\n\nexport default PieChart;\n","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarChart.js",["131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/TransactionsGrid.js",["145","146","147","148"],"import React, {useState} from 'react';\nimport {Button, Form} from 'react-bootstrap';\nimport Grid from '@material-ui/core/Grid';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport ImportTransaction from './ImportTransaction'\nimport { GridApi } from 'ag-grid-community';\n\nfunction TransactionsGrid(props) {\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [showImport, setShowImport] = useState(false);\n  const [selectedTransactions, setSelectedTransactions] = useState([])\n\n  function onGridReady(params) {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n    params.api.sizeColumnsToFit(); \n  }\n\n  function saveTransactions(transactions){\n    fetch('/UpdateTransactions', {\n        method : \"POST\",\n        headers : {\"Content-type\" : \"application/json\"},\n        body: JSON.stringify({\n            userId : props.user['userId'],\n            transactionType : props.TransactionType.replace('es', 'e'),\n            transactions : transactions\n        })\n    })\n    .then(response => response.json())\n    .then(result => {\n      var transactions = result['transactions'];\n      for(var i = 0; i < transactions.length; i++){\n        var date = new Date(transactions[i]['Date']);\n        date.setDate(date.getDate() + 1)\n        transactions[i]['Date'] = date.toLocaleDateString()\n      }\n      props.setTransactions(transactions)\n    })\n    .catch(e => {\n        console.log(e);\n    });\n  }\n\n  function addTransaction(){\n      var today = new Date();\n      today.setDate(today.getDate())\n      var transactions = [{TransactionId: 0, CategoryId: props.categories[0].CategoryId, Description: \"\", Amount : 0, Date : today.toLocaleDateString()}].concat(props.transactions)\n      saveTransactions(transactions);\n  }\n\n  function deleteTransactions(){\n    var transactions = [];\n    for(var i = 0; i < props.transactions.length; i++){\n        var transaction = props.transactions[i];\n        if(!selectedTransactions.includes(transaction.TransactionId))\n          transactions.push(transaction);\n    }\n    saveTransactions(transactions);\n}\n\n  function CategoryCellRenderer(params){\n    return <Form.Control as=\"select\" defaultValue={params.value} style={{width:'100%'}} onChange={(event)=>{params.setValue(event.target.value)}}>\n            {props.categories.map((category) => \n              <option key={category.CategoryId} value={category.CategoryId}>{category.CategoryName}</option>\n            )}\n          </Form.Control>\n  }\n\n  function CategoryFilter(){\n    return <Form.Control as=\"select\" style={{width:'100%'}}>\n              <option key={0} value={0}>All</option>\n              {props.categories.map((category) => \n                <option key={category.CategoryId} value={category.CategoryId}>{category.CategoryName}</option>\n              )}\n            </Form.Control>\n  }\n  function LeftAlignedCellRenderer(params){\n    return <p style={{textAlign:'left'}}>{params.value}</p>\n  }\n\n  function MoneyCellRenderer(params){\n    return <p style={{textAlign:'left'}}>${params.value}</p>\n  }\n\n  function DateCellRenderer(params){\n    var date = new Date(params.value);\n    return <p style={{textAlign:'left'}}>{date.toLocaleDateString()}</p>\n  }\n\n  function CheckBoxCellRenderer(params){\n    return <input   type=\"checkbox\" \n                    onChange={() => {\n                        var index = selectedTransactions.indexOf(params.data.TransactionId); \n                        if(index == -1){\n                          selectedTransactions.push(params.data.TransactionId);\n                        }else{\n                          selectedTransactions.splice(index, 1);\n                        }\n                        setSelectedTransactions(selectedTransactions);\n                    }}\n            />\n  }\n\n  function onCellValueChanged(event){\n    var transactions = props.transactions;\n    transactions[event.rowIndex] = event.data;\n    saveTransactions(transactions);\n  }\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={7}>\n          <h5 style={{marginTop:7, marginRight:20,float:'right'}}>{props.TransactionType}</h5>\n      </Grid>\n      <Grid item xs={5}>\n          <Button variant=\"danger\" size=\"sm\" style={{float:'right'}} onClick={deleteTransactions}>Delete</Button>\n          <Button variant=\"primary\" size=\"sm\" style={{float:'right', marginRight:5}} onClick={() => {setShowImport(true)}}>Import</Button>\n          <Button variant=\"primary\" size=\"sm\" style={{float:'right', marginRight:5}} onClick={addTransaction}>Add</Button>\n      </Grid>\n      <Grid item xs={12}>\n          <div className=\"ag-theme-alpine\" style={{ height: 400, width: '100%' } }>\n              <AgGridReact\n                key = {props.gridKey}\n                rowData = {props.transactions}\n                onGridReady = {onGridReady}\n                onCellValueChanged = {onCellValueChanged}\n              >\n                <AgGridColumn headerName=\"\" field=\"TransactionId\" maxWidth={50} resizable cellRendererFramework={CheckBoxCellRenderer}></AgGridColumn>\n                <AgGridColumn headerName=\"Category\" field=\"CategoryId\" width={200} editable resizable cellRendererFramework={CategoryCellRenderer} filterFramework={CategoryFilter} sortable ></AgGridColumn>\n                <AgGridColumn headerName=\"Description\" field=\"Description\" maxWidth={300} editable resizable cellRendererFramework={LeftAlignedCellRenderer} filter='agDateColumnFilter'></AgGridColumn>\n                <AgGridColumn headerName=\"Amount\" field=\"Amount\" width={130} editable resizable cellRendererFramework={MoneyCellRenderer} filter='agNumberColumnFilter'></AgGridColumn>\n                <AgGridColumn headerName=\"Date\" field=\"Date\" width={130} editable resizable cellRendererFramework={DateCellRenderer} filter='agDateColumnFilter'></AgGridColumn>\n              </AgGridReact>\n          </div>\n          <ImportTransaction show={showImport} TransactionType={props.TransactionType} handleClose={() => {setShowImport(false)}} />\n      </Grid>\n    </Grid> \n  );\n}\n\nexport default TransactionsGrid;\n","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/ImportTransaction.js",["149","150","151","152","153","154","155","156"],"import React, {useState} from 'react'\nimport { Modal, Nav, Button } from 'react-bootstrap'\nimport Grid from '@material-ui/core/Grid';\nimport readXlsxFile from 'read-excel-file'\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction ImportTransaction(props) {\n    const [rows, setRows] = useState(null)\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n\n    function onGridReady(params) {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    }\n    \n    function readFile(){\n        console.log(props.user)\n        return;\n        var input = document.getElementById('input')\n    \n        readXlsxFile(input.files[0]).then((rows) => {\n          console.log(rows)\n        })\n      }\n\n    function handleImport(){\n        fetch('/UpdateSettings', {\n            method : \"POST\",\n            headers : {\"Content-type\" : \"application/json\"},\n            body: JSON.stringify({\n                userId : 123\n            })\n        })\n        .then(response => response.json())\n        .then(result => {\n            props.   handleClose()\n        })\n        .catch(e => {\n            console.log(e);\n        });\n    }\n    \n    return (\n    <Modal show={props.show} onHide={props.handleClose}>\n        <Modal.Header>\n            <Modal.Title>Import {props.TransactionType}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n             <Grid container spacing={0}>\n                <Grid item xs={12}>\n                    <input type=\"file\" />\n                </Grid>\n                <Grid item xs={12}>\n                    {rows && (\n                        <div className=\"ag-theme-alpine\" style={{ height: '100%', width: '100%' } }>\n                            <AgGridReact\n                                domLayout=\"autoHeight\"\n                            >\n                                <AgGridColumn headerName=\"\" field=\"TransactionId\" width={50} ></AgGridColumn>\n                                <AgGridColumn headerName=\"Category\" field=\"CategoryName\" width={125} editable></AgGridColumn>\n                                <AgGridColumn headerName=\"Description\" field=\"Description\" width={250} editable></AgGridColumn>\n                                <AgGridColumn headerName=\"Amount\" field=\"Amount\" width={125} editable></AgGridColumn>\n                                <AgGridColumn headerName=\"Date\" field=\"Date\" width={125} editable></AgGridColumn>\n                            </AgGridReact>\n                        </div>\n                    )}\n                    \n                </Grid>\n            </Grid> \n        </Modal.Body>\n        <Modal.Footer>\n            <Button variant=\"primary\" onClick={handleImport}>Import</Button>\n            <Button variant=\"secondary\" onClick={props.handleClose}>Close</Button>\n        </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default ImportTransaction;","/Users/josephgordon/Desktop/BudgetAppDev/BudgetReactApp/src/Components/DashboardComponents/BarButtons.js",["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173"],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":31,"column":105,"nodeType":"180","messageId":"181","endLine":31,"endColumn":107},{"ruleId":"178","severity":1,"message":"182","line":67,"column":36,"nodeType":"180","messageId":"181","endLine":67,"endColumn":38},{"ruleId":"178","severity":1,"message":"179","line":59,"column":30,"nodeType":"180","messageId":"181","endLine":59,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":73,"column":19,"nodeType":"185","messageId":"186","endLine":73,"endColumn":20},{"ruleId":"183","severity":1,"message":"187","line":74,"column":17,"nodeType":"185","messageId":"186","endLine":74,"endColumn":21},{"ruleId":"188","severity":1,"message":"189","line":6,"column":8,"nodeType":"185","messageId":"190","endLine":6,"endColumn":24},{"ruleId":"188","severity":1,"message":"191","line":7,"column":8,"nodeType":"185","messageId":"190","endLine":7,"endColumn":16},{"ruleId":"188","severity":1,"message":"192","line":15,"column":10,"nodeType":"185","messageId":"190","endLine":15,"endColumn":39},{"ruleId":"178","severity":1,"message":"179","line":61,"column":30,"nodeType":"180","messageId":"181","endLine":61,"endColumn":32},{"ruleId":"188","severity":1,"message":"193","line":11,"column":12,"nodeType":"185","messageId":"190","endLine":11,"endColumn":19},{"ruleId":"188","severity":1,"message":"194","line":12,"column":12,"nodeType":"185","messageId":"190","endLine":12,"endColumn":25},{"ruleId":"178","severity":1,"message":"179","line":51,"column":38,"nodeType":"180","messageId":"181","endLine":51,"endColumn":40},{"ruleId":"188","severity":1,"message":"195","line":1,"column":16,"nodeType":"185","messageId":"190","endLine":1,"endColumn":24},{"ruleId":"188","severity":1,"message":"195","line":1,"column":16,"nodeType":"185","messageId":"190","endLine":1,"endColumn":24},{"ruleId":"188","severity":1,"message":"196","line":2,"column":13,"nodeType":"185","messageId":"190","endLine":2,"endColumn":21},{"ruleId":"188","severity":1,"message":"197","line":9,"column":3,"nodeType":"185","messageId":"190","endLine":9,"endColumn":20},{"ruleId":"188","severity":1,"message":"198","line":10,"column":3,"nodeType":"185","messageId":"190","endLine":10,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":34,"column":37,"nodeType":"180","messageId":"181","endLine":34,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":58,"column":34,"nodeType":"201","messageId":"202","endLine":58,"endColumn":40},{"ruleId":"199","severity":1,"message":"200","line":80,"column":34,"nodeType":"201","messageId":"202","endLine":80,"endColumn":40},{"ruleId":"188","severity":1,"message":"195","line":1,"column":16,"nodeType":"185","messageId":"190","endLine":1,"endColumn":24},{"ruleId":"188","severity":1,"message":"195","line":1,"column":16,"nodeType":"185","messageId":"190","endLine":1,"endColumn":24},{"ruleId":"188","severity":1,"message":"203","line":4,"column":8,"nodeType":"185","messageId":"190","endLine":4,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":13,"column":15,"nodeType":"180","messageId":"181","endLine":13,"endColumn":17},{"ruleId":"178","severity":1,"message":"179","line":15,"column":21,"nodeType":"180","messageId":"181","endLine":15,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":45,"column":50,"nodeType":"180","messageId":"181","endLine":45,"endColumn":52},{"ruleId":"178","severity":1,"message":"179","line":52,"column":50,"nodeType":"180","messageId":"181","endLine":52,"endColumn":52},{"ruleId":"178","severity":1,"message":"179","line":61,"column":50,"nodeType":"180","messageId":"181","endLine":61,"endColumn":52},{"ruleId":"178","severity":1,"message":"179","line":68,"column":50,"nodeType":"180","messageId":"181","endLine":68,"endColumn":52},{"ruleId":"178","severity":1,"message":"179","line":75,"column":50,"nodeType":"180","messageId":"181","endLine":75,"endColumn":52},{"ruleId":"188","severity":1,"message":"195","line":1,"column":16,"nodeType":"185","messageId":"190","endLine":1,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":10,"column":51,"nodeType":"180","messageId":"181","endLine":10,"endColumn":53},{"ruleId":"178","severity":1,"message":"179","line":11,"column":53,"nodeType":"180","messageId":"181","endLine":11,"endColumn":55},{"ruleId":"178","severity":1,"message":"179","line":14,"column":39,"nodeType":"180","messageId":"181","endLine":14,"endColumn":41},{"ruleId":"178","severity":1,"message":"179","line":16,"column":45,"nodeType":"180","messageId":"181","endLine":16,"endColumn":47},{"ruleId":"178","severity":1,"message":"179","line":19,"column":41,"nodeType":"180","messageId":"181","endLine":19,"endColumn":43},{"ruleId":"178","severity":1,"message":"179","line":53,"column":42,"nodeType":"180","messageId":"181","endLine":53,"endColumn":44},{"ruleId":"178","severity":1,"message":"179","line":53,"column":79,"nodeType":"180","messageId":"181","endLine":53,"endColumn":81},{"ruleId":"178","severity":1,"message":"179","line":53,"column":120,"nodeType":"180","messageId":"181","endLine":53,"endColumn":122},{"ruleId":"178","severity":1,"message":"179","line":54,"column":41,"nodeType":"180","messageId":"181","endLine":54,"endColumn":43},{"ruleId":"178","severity":1,"message":"179","line":54,"column":78,"nodeType":"180","messageId":"181","endLine":54,"endColumn":80},{"ruleId":"178","severity":1,"message":"179","line":54,"column":118,"nodeType":"180","messageId":"181","endLine":54,"endColumn":120},{"ruleId":"178","severity":1,"message":"179","line":60,"column":44,"nodeType":"180","messageId":"181","endLine":60,"endColumn":46},{"ruleId":"178","severity":1,"message":"179","line":60,"column":81,"nodeType":"180","messageId":"181","endLine":60,"endColumn":83},{"ruleId":"178","severity":1,"message":"179","line":60,"column":122,"nodeType":"180","messageId":"181","endLine":60,"endColumn":124},{"ruleId":"178","severity":1,"message":"179","line":61,"column":41,"nodeType":"180","messageId":"181","endLine":61,"endColumn":43},{"ruleId":"178","severity":1,"message":"179","line":61,"column":78,"nodeType":"180","messageId":"181","endLine":61,"endColumn":80},{"ruleId":"178","severity":1,"message":"179","line":61,"column":118,"nodeType":"180","messageId":"181","endLine":61,"endColumn":120},{"ruleId":"178","severity":1,"message":"179","line":12,"column":44,"nodeType":"180","messageId":"181","endLine":12,"endColumn":46},{"ruleId":"178","severity":1,"message":"179","line":14,"column":28,"nodeType":"180","messageId":"181","endLine":14,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":32,"column":28,"nodeType":"180","messageId":"181","endLine":32,"endColumn":30},{"ruleId":"183","severity":1,"message":"204","line":33,"column":15,"nodeType":"185","messageId":"186","endLine":33,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":38,"column":15,"nodeType":"185","messageId":"186","endLine":38,"endColumn":16},{"ruleId":"183","severity":1,"message":"204","line":39,"column":13,"nodeType":"185","messageId":"186","endLine":39,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":51,"column":44,"nodeType":"180","messageId":"181","endLine":51,"endColumn":46},{"ruleId":"183","severity":1,"message":"184","line":53,"column":15,"nodeType":"185","messageId":"186","endLine":53,"endColumn":16},{"ruleId":"183","severity":1,"message":"184","line":56,"column":15,"nodeType":"185","messageId":"186","endLine":56,"endColumn":16},{"ruleId":"183","severity":1,"message":"204","line":59,"column":15,"nodeType":"185","messageId":"186","endLine":59,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":61,"column":17,"nodeType":"185","messageId":"186","endLine":61,"endColumn":18},{"ruleId":"183","severity":1,"message":"184","line":65,"column":15,"nodeType":"185","messageId":"186","endLine":65,"endColumn":16},{"ruleId":"183","severity":1,"message":"204","line":66,"column":13,"nodeType":"185","messageId":"186","endLine":66,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":71,"column":15,"nodeType":"185","messageId":"186","endLine":71,"endColumn":16},{"ruleId":"188","severity":1,"message":"205","line":8,"column":10,"nodeType":"185","messageId":"190","endLine":8,"endColumn":17},{"ruleId":"188","severity":1,"message":"193","line":11,"column":10,"nodeType":"185","messageId":"190","endLine":11,"endColumn":17},{"ruleId":"188","severity":1,"message":"194","line":12,"column":10,"nodeType":"185","messageId":"190","endLine":12,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":97,"column":34,"nodeType":"180","messageId":"181","endLine":97,"endColumn":36},{"ruleId":"188","severity":1,"message":"206","line":2,"column":17,"nodeType":"185","messageId":"190","endLine":2,"endColumn":20},{"ruleId":"188","severity":1,"message":"207","line":10,"column":18,"nodeType":"185","messageId":"190","endLine":10,"endColumn":25},{"ruleId":"188","severity":1,"message":"193","line":11,"column":12,"nodeType":"185","messageId":"190","endLine":11,"endColumn":19},{"ruleId":"188","severity":1,"message":"194","line":12,"column":12,"nodeType":"185","messageId":"190","endLine":12,"endColumn":25},{"ruleId":"188","severity":1,"message":"208","line":14,"column":14,"nodeType":"185","messageId":"190","endLine":14,"endColumn":25},{"ruleId":"188","severity":1,"message":"209","line":19,"column":14,"nodeType":"185","messageId":"190","endLine":19,"endColumn":22},{"ruleId":"210","severity":1,"message":"211","line":22,"column":9,"nodeType":"212","messageId":"213","endLine":26,"endColumn":11},{"ruleId":"214","severity":1,"message":"215","line":39,"column":13,"nodeType":"216","messageId":"217","endLine":39,"endColumn":33,"fix":"218"},{"ruleId":"188","severity":1,"message":"195","line":1,"column":16,"nodeType":"185","messageId":"190","endLine":1,"endColumn":24},{"ruleId":"188","severity":1,"message":"219","line":2,"column":30,"nodeType":"185","messageId":"190","endLine":2,"endColumn":34},{"ruleId":"178","severity":1,"message":"179","line":10,"column":15,"nodeType":"180","messageId":"181","endLine":10,"endColumn":17},{"ruleId":"178","severity":1,"message":"179","line":12,"column":21,"nodeType":"180","messageId":"181","endLine":12,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":15,"column":20,"nodeType":"180","messageId":"181","endLine":15,"endColumn":22},{"ruleId":"178","severity":1,"message":"179","line":25,"column":62,"nodeType":"180","messageId":"181","endLine":25,"endColumn":64},{"ruleId":"178","severity":1,"message":"179","line":26,"column":62,"nodeType":"180","messageId":"181","endLine":26,"endColumn":64},{"ruleId":"178","severity":1,"message":"179","line":27,"column":62,"nodeType":"180","messageId":"181","endLine":27,"endColumn":64},{"ruleId":"178","severity":1,"message":"179","line":28,"column":62,"nodeType":"180","messageId":"181","endLine":28,"endColumn":64},{"ruleId":"178","severity":1,"message":"179","line":32,"column":29,"nodeType":"180","messageId":"181","endLine":32,"endColumn":31},{"ruleId":"178","severity":1,"message":"179","line":40,"column":29,"nodeType":"180","messageId":"181","endLine":40,"endColumn":31},{"ruleId":"178","severity":1,"message":"179","line":48,"column":29,"nodeType":"180","messageId":"181","endLine":48,"endColumn":31},{"ruleId":"178","severity":1,"message":"179","line":56,"column":29,"nodeType":"180","messageId":"181","endLine":56,"endColumn":31},{"ruleId":"178","severity":1,"message":"179","line":65,"column":71,"nodeType":"180","messageId":"181","endLine":65,"endColumn":73},{"ruleId":"178","severity":1,"message":"179","line":66,"column":71,"nodeType":"180","messageId":"181","endLine":66,"endColumn":73},{"ruleId":"178","severity":1,"message":"179","line":70,"column":71,"nodeType":"180","messageId":"181","endLine":70,"endColumn":73},{"ruleId":"178","severity":1,"message":"179","line":71,"column":71,"nodeType":"180","messageId":"181","endLine":71,"endColumn":73},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'i' is already defined.","Identifier","redeclared","'date' is already defined.","no-unused-vars","'FormControlLabel' is defined but never used.","unusedVar","'Checkbox' is defined but never used.","'SentimentDissatisfiedOutlined' is defined but never used.","'gridApi' is assigned a value but never used.","'gridColumnApi' is assigned a value but never used.","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'ChartCategoryAxis' is defined but never used.","'ChartCategoryAxisItem' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'SettingsIcon' is defined but never used.","'curDate' is already defined.","'GridApi' is defined but never used.","'Nav' is defined but never used.","'setRows' is assigned a value but never used.","'onGridReady' is defined but never used.","'readFile' is defined but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","no-whitespace-before-property","Unexpected whitespace before property handleClose.","MemberExpression","unexpectedWhitespace",{"range":"222","text":"223"},"'Form' is defined but never used.","no-global-assign","no-unsafe-negation",[1226,1230],"."]